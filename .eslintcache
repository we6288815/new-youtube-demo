[{"d:\\workspace\\IceProjects\\media-content-frontend\\ice.config.js":"1","d:\\workspace\\IceProjects\\media-content-frontend\\src\\components\\NotFound\\index.jsx":"2","d:\\workspace\\IceProjects\\media-content-frontend\\src\\config\\menu.js":"3","d:\\workspace\\IceProjects\\media-content-frontend\\src\\config\\routes.js":"4","d:\\workspace\\IceProjects\\media-content-frontend\\src\\index.jsx":"5","d:\\workspace\\IceProjects\\media-content-frontend\\src\\layouts\\BasicLayout\\components\\Aside\\index.jsx":"6","d:\\workspace\\IceProjects\\media-content-frontend\\src\\layouts\\BasicLayout\\components\\Footer\\index.jsx":"7","d:\\workspace\\IceProjects\\media-content-frontend\\src\\layouts\\BasicLayout\\components\\Header\\index.jsx":"8","d:\\workspace\\IceProjects\\media-content-frontend\\src\\layouts\\BasicLayout\\index.jsx":"9","d:\\workspace\\IceProjects\\media-content-frontend\\src\\router.jsx":"10","d:\\workspace\\IceProjects\\youtube-media-frontend\\ice.config.js":"11","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\channelApi.js":"12","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\collectLogApi.js":"13","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\commonApi.js":"14","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\gamingApi.js":"15","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\liveApi.js":"16","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\movieApi.js":"17","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\playListApi.js":"18","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\regionApi.js":"19","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\searchApi.js":"20","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\systemProfileApi.js":"21","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\trendingApi.js":"22","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\videoApi.js":"23","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\components\\CustomTable\\CustomTable.jsx":"24","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\components\\CustomTable\\index.js":"25","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\components\\LocaleProvider\\index.js":"26","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\components\\LocaleProvider\\LocaleProvider.jsx":"27","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\components\\NotFound\\index.jsx":"28","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\components\\PageLoading\\index.jsx":"29","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\config\\menu.js":"30","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\config\\routes.js":"31","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\index.jsx":"32","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\layouts\\BasicLayout\\components\\Aside\\index.jsx":"33","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\layouts\\BasicLayout\\components\\Footer\\index.jsx":"34","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\layouts\\BasicLayout\\components\\Header\\index.jsx":"35","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\layouts\\BasicLayout\\index.jsx":"36","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\en-US\\base.js":"37","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\en-US\\channel.js":"38","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\en-US\\common.js":"39","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\en-US\\index.js":"40","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\en-US\\playList.js":"41","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\en-US\\video.js":"42","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-CN\\base.js":"43","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-CN\\channel.js":"44","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-CN\\common.js":"45","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-CN\\index.js":"46","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-CN\\playList.js":"47","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-CN\\video.js":"48","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-TW\\base.js":"49","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-TW\\channel.js":"50","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-TW\\common.js":"51","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-TW\\index.js":"52","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-TW\\playList.js":"53","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-TW\\video.js":"54","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\ChannelManage\\ChannelManage.jsx":"55","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\ChannelManage\\components\\ChannelEditDialog.jsx":"56","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\ChannelManage\\index.js":"57","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\CollectLogManage\\CollectLogManage.jsx":"58","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\CollectLogManage\\index.js":"59","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\GamingManage\\components\\GamingVideoManage.jsx":"60","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\GamingManage\\GamingManage.jsx":"61","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\GamingManage\\index.js":"62","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\LiveManage\\components\\LiveVideoManage.jsx":"63","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\LiveManage\\index.js":"64","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\LiveManage\\LiveManage.jsx":"65","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\MovieManage\\components\\MovieVideoManage.jsx":"66","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\MovieManage\\index.js":"67","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\MovieManage\\MovieManage.jsx":"68","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\PlayListManage\\components\\PlayListEditDialog.jsx":"69","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\PlayListManage\\components\\PosterManageDialog.jsx":"70","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\PlayListManage\\index.js":"71","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\PlayListManage\\PlayListManage.jsx":"72","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\SystemProfileManage\\index.js":"73","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\SystemProfileManage\\SystemProfileManage.jsx":"74","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\TrendingManage\\components\\TrendingVideoManage.jsx":"75","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\TrendingManage\\index.js":"76","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\TrendingManage\\TrendingManage.jsx":"77","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\VideoManage\\components\\PosterManageDialog.jsx":"78","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\VideoManage\\components\\VideoEditDialog.jsx":"79","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\VideoManage\\index.js":"80","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\VideoManage\\VideoManage.jsx":"81","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\router.jsx":"82","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\stores\\commonConfig.js":"83","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\stores\\index.js":"84","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\stores\\regionsConfig.js":"85","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\utils\\AxiosUtil.js":"86","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\utils\\DateUtil.js":"87","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\utils\\eventProxy.js":"88","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\utils\\locale.js":"89"},{"size":323,"mtime":1566375693572,"results":"90","hashOfConfig":"91"},{"size":869,"mtime":1566375694655,"results":"92","hashOfConfig":"91"},{"size":455,"mtime":1566376650589,"results":"93","hashOfConfig":"91"},{"size":1089,"mtime":1566375694642,"results":"94","hashOfConfig":"91"},{"size":352,"mtime":1566375694683,"results":"95","hashOfConfig":"91"},{"size":3459,"mtime":1566375694685,"results":"96","hashOfConfig":"91"},{"size":551,"mtime":1566375694685,"results":"97","hashOfConfig":"91"},{"size":3060,"mtime":1566375694685,"results":"98","hashOfConfig":"91"},{"size":946,"mtime":1566378031456,"results":"99","hashOfConfig":"91"},{"size":1853,"mtime":1566375694736,"results":"100","hashOfConfig":"91"},{"size":643,"mtime":1582163576478,"results":"101","hashOfConfig":"102"},{"size":736,"mtime":1582160906431,"results":"103","hashOfConfig":"102"},{"size":183,"mtime":1582160952061,"results":"104","hashOfConfig":"102"},{"size":798,"mtime":1582161087987,"results":"105","hashOfConfig":"102"},{"size":338,"mtime":1582163908897,"results":"106","hashOfConfig":"102"},{"size":330,"mtime":1582163894603,"results":"107","hashOfConfig":"102"},{"size":334,"mtime":1582161106042,"results":"108","hashOfConfig":"102"},{"size":497,"mtime":1582161127386,"results":"109","hashOfConfig":"102"},{"size":173,"mtime":1582161140316,"results":"110","hashOfConfig":"102"},{"size":308,"mtime":1582161156009,"results":"111","hashOfConfig":"102"},{"size":335,"mtime":1582161191570,"results":"112","hashOfConfig":"102"},{"size":346,"mtime":1582164151098,"results":"113","hashOfConfig":"102"},{"size":469,"mtime":1582161178163,"results":"114","hashOfConfig":"102"},{"size":1014,"mtime":1582161296823,"results":"115","hashOfConfig":"102"},{"size":71,"mtime":1579249178899,"results":"116","hashOfConfig":"102"},{"size":80,"mtime":1579249178899,"results":"117","hashOfConfig":"102"},{"size":1913,"mtime":1582161382156,"results":"118","hashOfConfig":"102"},{"size":869,"mtime":1579249178899,"results":"119","hashOfConfig":"102"},{"size":188,"mtime":1579249178899,"results":"120","hashOfConfig":"102"},{"size":916,"mtime":1579249178899,"results":"121","hashOfConfig":"102"},{"size":1902,"mtime":1582161460611,"results":"122","hashOfConfig":"102"},{"size":580,"mtime":1582163551446,"results":"123","hashOfConfig":"102"},{"size":3459,"mtime":1579249178899,"results":"124","hashOfConfig":"102"},{"size":551,"mtime":1579249178899,"results":"125","hashOfConfig":"102"},{"size":3060,"mtime":1579249178899,"results":"126","hashOfConfig":"102"},{"size":1242,"mtime":1582161519858,"results":"127","hashOfConfig":"102"},{"size":2349,"mtime":1582163933551,"results":"128","hashOfConfig":"102"},{"size":1217,"mtime":1582163958325,"results":"129","hashOfConfig":"102"},{"size":1381,"mtime":1582163963901,"results":"130","hashOfConfig":"102"},{"size":252,"mtime":1579249178899,"results":"131","hashOfConfig":"102"},{"size":1941,"mtime":1582163973649,"results":"132","hashOfConfig":"102"},{"size":1712,"mtime":1582163978307,"results":"133","hashOfConfig":"102"},{"size":2312,"mtime":1582163986212,"results":"134","hashOfConfig":"102"},{"size":1129,"mtime":1582163990265,"results":"135","hashOfConfig":"102"},{"size":1344,"mtime":1582163994593,"results":"136","hashOfConfig":"102"},{"size":252,"mtime":1579249178899,"results":"137","hashOfConfig":"102"},{"size":1924,"mtime":1582164003857,"results":"138","hashOfConfig":"102"},{"size":1696,"mtime":1582164008792,"results":"139","hashOfConfig":"102"},{"size":949,"mtime":1582164015359,"results":"140","hashOfConfig":"102"},{"size":1129,"mtime":1582164019780,"results":"141","hashOfConfig":"102"},{"size":1344,"mtime":1582164024969,"results":"142","hashOfConfig":"102"},{"size":252,"mtime":1579249178899,"results":"143","hashOfConfig":"102"},{"size":1921,"mtime":1582164033096,"results":"144","hashOfConfig":"102"},{"size":1696,"mtime":1582164038420,"results":"145","hashOfConfig":"102"},{"size":10757,"mtime":1582107403645,"results":"146","hashOfConfig":"102"},{"size":6607,"mtime":1582103435936,"results":"147","hashOfConfig":"102"},{"size":77,"mtime":1579249178899,"results":"148","hashOfConfig":"102"},{"size":6399,"mtime":1582103596259,"results":"149","hashOfConfig":"102"},{"size":86,"mtime":1579249178899,"results":"150","hashOfConfig":"102"},{"size":6374,"mtime":1582104081302,"results":"151","hashOfConfig":"102"},{"size":4958,"mtime":1582103795273,"results":"152","hashOfConfig":"102"},{"size":74,"mtime":1579249178899,"results":"153","hashOfConfig":"102"},{"size":6800,"mtime":1582104709020,"results":"154","hashOfConfig":"102"},{"size":68,"mtime":1579249178899,"results":"155","hashOfConfig":"102"},{"size":4912,"mtime":1582104366552,"results":"156","hashOfConfig":"102"},{"size":4501,"mtime":1582105043573,"results":"157","hashOfConfig":"102"},{"size":71,"mtime":1579249178899,"results":"158","hashOfConfig":"102"},{"size":4933,"mtime":1582104906716,"results":"159","hashOfConfig":"102"},{"size":3236,"mtime":1582105997940,"results":"160","hashOfConfig":"102"},{"size":13922,"mtime":1582163651380,"results":"161","hashOfConfig":"102"},{"size":80,"mtime":1579249178899,"results":"162","hashOfConfig":"102"},{"size":12382,"mtime":1582105895092,"results":"163","hashOfConfig":"102"},{"size":95,"mtime":1579249178899,"results":"164","hashOfConfig":"102"},{"size":7353,"mtime":1582106609971,"results":"165","hashOfConfig":"102"},{"size":6500,"mtime":1582163506541,"results":"166","hashOfConfig":"102"},{"size":80,"mtime":1579249178899,"results":"167","hashOfConfig":"102"},{"size":4996,"mtime":1582106762455,"results":"168","hashOfConfig":"102"},{"size":13870,"mtime":1582163651519,"results":"169","hashOfConfig":"102"},{"size":5164,"mtime":1582107617531,"results":"170","hashOfConfig":"102"},{"size":71,"mtime":1579249178899,"results":"171","hashOfConfig":"102"},{"size":15206,"mtime":1582107361716,"results":"172","hashOfConfig":"102"},{"size":2144,"mtime":1579249178899,"results":"173","hashOfConfig":"102"},{"size":724,"mtime":1582161726623,"results":"174","hashOfConfig":"102"},{"size":300,"mtime":1579249178899,"results":"175","hashOfConfig":"102"},{"size":789,"mtime":1582161762559,"results":"176","hashOfConfig":"102"},{"size":561,"mtime":1582163617300,"results":"177","hashOfConfig":"102"},{"size":1216,"mtime":1582162726248,"results":"178","hashOfConfig":"102"},{"size":1085,"mtime":1582163394730,"results":"179","hashOfConfig":"102"},{"size":658,"mtime":1579249178899,"results":"180","hashOfConfig":"102"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1azjqt8",{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":2,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"e2nxij",{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"253"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"290","messages":"291","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":2,"source":"292"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"295"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":2,"source":"300"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"303","messages":"304","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"305"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":"308"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"313"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"316","messages":"317","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":"318"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"321"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"324","messages":"325","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":"326"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":2,"source":"337"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"340","messages":"341","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"342"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"345"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"348","messages":"349","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":"350"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"359","messages":"360","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":3,"source":"361"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"d:\\workspace\\IceProjects\\media-content-frontend\\ice.config.js",[],"d:\\workspace\\IceProjects\\media-content-frontend\\src\\components\\NotFound\\index.jsx",[],"d:\\workspace\\IceProjects\\media-content-frontend\\src\\config\\menu.js",[],"d:\\workspace\\IceProjects\\media-content-frontend\\src\\config\\routes.js",[],"d:\\workspace\\IceProjects\\media-content-frontend\\src\\index.jsx",[],"d:\\workspace\\IceProjects\\media-content-frontend\\src\\layouts\\BasicLayout\\components\\Aside\\index.jsx",[],"d:\\workspace\\IceProjects\\media-content-frontend\\src\\layouts\\BasicLayout\\components\\Footer\\index.jsx",[],"d:\\workspace\\IceProjects\\media-content-frontend\\src\\layouts\\BasicLayout\\components\\Header\\index.jsx",[],"d:\\workspace\\IceProjects\\media-content-frontend\\src\\layouts\\BasicLayout\\index.jsx",["378","379"],"d:\\workspace\\IceProjects\\media-content-frontend\\src\\router.jsx",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\ice.config.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\channelApi.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\collectLogApi.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\commonApi.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\gamingApi.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\liveApi.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\movieApi.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\playListApi.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\regionApi.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\searchApi.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\systemProfileApi.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\trendingApi.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\api\\videoApi.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\components\\CustomTable\\CustomTable.jsx",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\components\\CustomTable\\index.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\components\\LocaleProvider\\index.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\components\\LocaleProvider\\LocaleProvider.jsx",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\components\\NotFound\\index.jsx",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\components\\PageLoading\\index.jsx",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\config\\menu.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\config\\routes.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\index.jsx",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\layouts\\BasicLayout\\components\\Aside\\index.jsx",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\layouts\\BasicLayout\\components\\Footer\\index.jsx",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\layouts\\BasicLayout\\components\\Header\\index.jsx",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\layouts\\BasicLayout\\index.jsx",["380"],"import React, { useEffect } from 'react';\nimport Layout from '@icedesign/layout';\nimport stores from '@/stores/index';\nimport Aside from './components/Aside';\nimport styles from './index.module.scss';\n\nexport default function BasicLayout({ children }) {\n\n  const regionsConfig = stores.useStore('regionsConfig');\n  const commonConfig = stores.useStore('commonConfig');\n  const { fetchRegionData } = regionsConfig;\n  const { fetchServerUri, fetchOperatorId } = commonConfig;\n\n  useEffect(() => {\n    fetchRegionData();\n    fetchServerUri();\n    fetchOperatorId();\n  }, []);\n\n  return (\n    <Layout fixable className={styles.layout}>\n      {/* <Layout.Header type=\"secondary\">\n        <Header />\n      </Layout.Header> */}\n\n      <Layout.Section>\n        {\n            // 如果为开发环境，则显示菜单栏\n            process.env.NODE_ENV === \"development\"\n            &&\n            <Layout.Aside>\n              <Aside />\n            </Layout.Aside>\n          }\n\n        {/* 主体内容 */}\n        <Layout.Main scrollable className={styles.main}>\n          {children}\n          {/* <Layout.Footer type=\"none\">\n            <Footer />\n          </Layout.Footer> */}\n        </Layout.Main>\n      </Layout.Section>\n    </Layout>\n  );\n}\n","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\en-US\\base.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\en-US\\channel.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\en-US\\common.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\en-US\\index.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\en-US\\playList.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\en-US\\video.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-CN\\base.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-CN\\channel.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-CN\\common.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-CN\\index.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-CN\\playList.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-CN\\video.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-TW\\base.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-TW\\channel.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-TW\\common.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-TW\\index.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-TW\\playList.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\locales\\zh-TW\\video.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\ChannelManage\\ChannelManage.jsx",["381","382","383","384","385","386","387","388","389","390","391","392","393","394"],"import React, { useState, useEffect } from 'react';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport IceContainer from '@icedesign/container';\r\nimport { CustomToolBar } from '@skyworthcloud/component';\r\nimport { Loading, Pagination, Dialog, Message } from '@alifd/next';\r\nimport CustomTable from '@/components/CustomTable';\r\nimport { findChannelsApi, saveChannelApi, deleteChannelByIdApi, instantCollectApi } from '@/api/channelApi';\r\nimport ChannelEditDialog from './components/ChannelEditDialog';\r\nimport eventProxy from '@/utils/eventProxy';\r\nimport '@/common/common-scss.scss';\r\n\r\nfunction ChannelManage(props) {\r\n\r\n    let searchField = null;\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [dialogVisible, setDialogVisible] = useState(false);\r\n    const [saveSubmitting, setSaveSubmitting] = useState(false);\r\n    const [editing, setEditing] = useState(false);\r\n    const [channels, setChannels] = useState([]);\r\n    const [searchParams, setSearchParams] = useState({});\r\n    const [pageInfo, setPageInfo] = useState({pageSize: 7, total: 0});\r\n    const [selectKeys, setSelectKeys] = useState([]);\r\n\r\n    useEffect(() => {\r\n        refreshData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (searchParams.title !== undefined) {\r\n            const params = {\r\n                ...searchParams,\r\n                ...pageInfo,\r\n                pageNum: 1,\r\n            };\r\n            fetchChannelDataSource(params);\r\n        }\r\n    }, [searchParams]);\r\n\r\n    const columns = [\r\n        {\r\n            title: <FormattedMessage id=\"media.channel.title\" />,\r\n            dataIndex: 'title',\r\n            key: 'title',\r\n            lock: 'left',\r\n            width: 250,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.channel.channelId\" />,\r\n            dataIndex: 'channelId',\r\n            key: 'channelId',\r\n            width: 250,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.channel.description\" />,\r\n            dataIndex: 'description',\r\n            key: 'description',\r\n            width: 850,\r\n            render: (value, index, record) => {\r\n                return (\r\n                    <div className=\"tags-description\"><span title={record.description}>{record.description}</span></div>\r\n                );\r\n            },\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.base.operation\" />,\r\n            key: 'operation',\r\n            width: 150,\r\n            lock: 'right',\r\n            render: (value, index, record) => {\r\n                return (\r\n                    <div>\r\n                        <a\r\n                            style={styles.operationItem}\r\n                            onClick={() => onEditChannel(record)}\r\n                        >\r\n                            <FormattedMessage id=\"media.base.edit\" />\r\n                        </a>\r\n                        <a\r\n                            style={styles.operationItem}\r\n                            onClick={() => onDeleteChannel(record)}\r\n                        >\r\n                            <FormattedMessage id=\"media.base.delete\" />\r\n                        </a>\r\n                    </div>\r\n                );\r\n            },\r\n        },\r\n    ];\r\n\r\n    const toolBarConfigFun = () => {\r\n        const { intl: { formatMessage } } = props;\r\n        const messageValue = {\r\n            titlePlaceholder: formatMessage({ id: 'media.channel.title.placeholder' }),\r\n        };\r\n        return [\r\n            {\r\n                label: <FormattedMessage id=\"media.channel.title\" />,\r\n                key: 'title',\r\n                component: 'Input',\r\n                field: 'title',\r\n                componentProps: {\r\n                    placeholder: messageValue.titlePlaceholder,\r\n                },\r\n            },\r\n            {\r\n                label: <FormattedMessage id=\"media.base.search\" />,\r\n                key: 'search',\r\n                component: 'Button',\r\n                componentProps: {\r\n                    onClick: () => onSearchChannel(),\r\n                },\r\n            },\r\n            {\r\n                label: <FormattedMessage id=\"media.channel.collect\" />,\r\n                key: 'collect',\r\n                component: 'Button',\r\n                componentProps: {\r\n                    disabled: selectKeys.length === 0,\r\n                    onClick: () => onCollect(),\r\n                },\r\n            },\r\n            {\r\n                label: <FormattedMessage id=\"media.base.add\" />,\r\n                key: 'addChannel',\r\n                component: 'Button',\r\n                componentProps: {\r\n                    onClick: () => onAddChannel(),\r\n                },\r\n            },\r\n        ];\r\n    };\r\n\r\n    const rowSelection = {\r\n        onChange: (selectedRowKeys) => {\r\n            setSelectKeys(selectedRowKeys);\r\n        },\r\n        selectedRowKeys: selectKeys,\r\n    };\r\n\r\n    const fetchChannelDataSource = (params) => {\r\n        setIsLoading(true);\r\n        findChannelsApi(params).then((response) => {\r\n            const { data } = response;\r\n            setChannels(data.data.items);\r\n            setPageInfo(data.data.pageInfo);\r\n        }).catch((error) => {\r\n            setChannels([]);\r\n            console.log('error: ', error);\r\n        }).finally(() => {\r\n            setIsLoading(false);\r\n        });\r\n    };\r\n\r\n    const refreshData = () => {\r\n        const params = {\r\n            ...pageInfo,\r\n            pageNum: 1,\r\n        };\r\n        setSelectKeys([]);\r\n        fetchChannelDataSource(params);\r\n    };\r\n\r\n    const onSearchChannel = () => {\r\n        setSearchParams({ ...searchParams, ...searchField.getValues() });\r\n        setSelectKeys([]);\r\n    };\r\n\r\n    const onCollect = () => {\r\n        const params = {\r\n            ids: selectKeys.join(','),\r\n            type: 'channel',\r\n        };\r\n        const { intl: { formatMessage } } = props;\r\n        const messageValue = {\r\n            success: formatMessage({ id: 'media.channel.collect.success' }),\r\n            failed: formatMessage({ id: 'media.channel.collect.failed' }),\r\n        };\r\n        instantCollectApi(params).then(() => {\r\n            Message.success(messageValue.success);\r\n            setSelectKeys([]);\r\n        }).catch((error) => {\r\n            Message.error(messageValue.failed);\r\n            console.log('Instant collect from channel error', error);\r\n        });\r\n    };\r\n\r\n    const onAddChannel = () => {\r\n        setDialogVisible(true);\r\n        setEditing(false);\r\n    };\r\n\r\n    const onEditChannel = (channel) => {\r\n        setDialogVisible(true);\r\n        setEditing(true);\r\n        eventProxy.trigger('editChannel', channel);\r\n    };\r\n\r\n    const onDeleteChannel = (channel) => {\r\n        const { intl: { formatMessage } } = props;\r\n        const messageValue = {\r\n            title: formatMessage({ id: 'media.channel.delete.title' }),\r\n            content: formatMessage({ id: 'media.channel.delete.content' }),\r\n            success: formatMessage({ id: 'media.base.delete.success' }),\r\n            failed: formatMessage({ id: 'media.base.delete.failed' }),\r\n        };\r\n        Dialog.confirm({\r\n            title: messageValue.title,\r\n            content: messageValue.content,\r\n            footerAlign: 'center',\r\n            onOk: () => {\r\n                return new Promise((resolve) => {\r\n                    deleteChannelByIdApi(channel.channelId).then(() => {\r\n                        Message.success(messageValue.success);\r\n                        resolve();\r\n                        refreshData();\r\n                    }).catch((error) => {\r\n                        console.log('delete channel error: ', error);\r\n                        Message.error(messageValue.failed);\r\n                        resolve();\r\n                    });\r\n                });\r\n            },\r\n        });\r\n    };\r\n\r\n    const onSaveChannel = (values, errors) => {\r\n        if (saveSubmitting) {\r\n            return;\r\n        }\r\n        if (errors) {\r\n            console.log('save errors:', errors);\r\n            return;\r\n        }\r\n        const { intl: { formatMessage } } = props;\r\n        const messageValue = {\r\n            success: formatMessage({ id: 'media.base.save.success' }),\r\n            failed: formatMessage({ id: 'media.base.save.failed' }),\r\n        };\r\n        setSaveSubmitting(true);\r\n        saveChannelApi(values).then(() => {\r\n            Message.success(messageValue.success);\r\n            refreshData();\r\n            onCloseDialog();\r\n        }).catch((error) => {\r\n            Message.error(messageValue.failed);\r\n            console.log(\"error: \", error);\r\n        }).finally(() => {\r\n            setSaveSubmitting(false);\r\n        });\r\n    };\r\n\r\n    const onPageChange = (pageNum) => {\r\n        setPageInfo({ ...pageInfo, pageNum });\r\n        fetchChannelDataSource({ ...pageInfo, pageNum });\r\n        setSelectKeys([]);\r\n    };\r\n\r\n    const onCloseDialog = () => {\r\n        setDialogVisible(false);\r\n    };\r\n\r\n    return (\r\n        <IceContainer>\r\n            <Loading\r\n                tip=\"loading...\"\r\n                visible={isLoading}\r\n                style={styles.loading}\r\n            >\r\n                <CustomToolBar\r\n                    config={toolBarConfigFun()}\r\n                    getInstance={(childCp) => {\r\n                        if (childCp) {\r\n                            searchField = childCp.getField();\r\n                        }\r\n                    }}\r\n                />\r\n                <CustomTable\r\n                    primaryKey='channelId'\r\n                    columns={columns}\r\n                    dataSource={channels}\r\n                    hasBorder={false}\r\n                    isZebra\r\n                    rowSelection={rowSelection}\r\n            />\r\n                <Pagination\r\n                    style={styles.pagination}\r\n                    type=\"simple\"\r\n                    pageSize={pageInfo.pageSize}\r\n                    current={pageInfo.pageNum}\r\n                    total={pageInfo.total}\r\n                    onChange={onPageChange}\r\n                />\r\n                <ChannelEditDialog\r\n                    visible={dialogVisible}\r\n                    submitting={saveSubmitting}\r\n                    editing={editing}\r\n                    onClose={onCloseDialog}\r\n                    onSubmit={onSaveChannel}\r\n                />\r\n            </Loading>\r\n        </IceContainer>\r\n    );\r\n}\r\n\r\nconst styles = {\r\n    pagination: {\r\n        margin: '20px 0',\r\n        textAlign: 'center',\r\n    },\r\n    loading: {\r\n        width: '100%',\r\n    },\r\n    operationItem: {\r\n        marginRight: '10px',\r\n        textDecoration: 'none',\r\n        color: '#5485F7',\r\n        cursor: 'pointer',\r\n    },\r\n};\r\n\r\nexport default injectIntl(ChannelManage);","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\ChannelManage\\components\\ChannelEditDialog.jsx",["395","396","397","398","399"],"import React, { useEffect } from 'react';\r\nimport { Dialog, Form, Field, Input, Checkbox, Button } from '@alifd/next';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { checkParamStatusApi } from '@/api/channelApi';\r\nimport eventProxy from '@/utils/eventProxy';\r\n\r\nconst FormItem = Form.Item;\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        span: 5,\r\n    },\r\n    wrapperCol: {\r\n        span: 16,\r\n    },\r\n};\r\n\r\nconst submitLayout = {\r\n    wrapperCol: {\r\n        offset: 9,\r\n    },\r\n};\r\n\r\nexport default injectIntl(function ChannelEditDialog(props) {\r\n    const field = Field.useField();\r\n\r\n    useEffect(() => {\r\n        eventProxy.on('editChannel', (channel) => {\r\n            field.setValues(channel);\r\n        });\r\n        return () => {\r\n            eventProxy.off('editChannel');\r\n        };\r\n    }, []);\r\n\r\n    const { intl: { formatMessage } } = props;\r\n    const messageValue = {\r\n        addChannel: formatMessage({ id: 'media.channel.add' }),\r\n        editChannel: formatMessage({ id: 'media.channel.edit' }),\r\n        channelId: formatMessage({ id: 'media.channel.channelId' }),\r\n        channelIdPlaceholder: formatMessage({ id: 'media.channel.channelId.placeholder' }),\r\n        channelIdRequired: formatMessage({ id: 'media.channel.channelId.required' }),\r\n        channelIdExists: formatMessage({ id: 'media.channel.channelId.exists' }),\r\n        title: formatMessage({ id: 'media.channel.title' }),\r\n        titlePlaceholder: formatMessage({ id: 'media.channel.title.placeholder' }),\r\n        titleRequired: formatMessage({ id: 'media.channel.title.required' }),\r\n        titleExists: formatMessage({ id: 'media.channel.title.exists' }),\r\n        description: formatMessage({ id: 'media.channel.description' }),\r\n        descriptionPlaceholder: formatMessage({ id: 'media.channel.description.placeholder' }),\r\n        collect: formatMessage({ id: 'media.channel.collect' }),\r\n        collectDescription: formatMessage({ id: 'media.channel.collect.description' }),\r\n    };\r\n\r\n    const trimValue = (fieldName, oldValue) => {\r\n        if (oldValue) {\r\n            const value = oldValue.trim();\r\n            field.setValue(fieldName, value);\r\n        }\r\n        return oldValue;\r\n    };\r\n\r\n    const validatorChannelId = (rule, oldValue) => {\r\n        const value = trimValue('channelId', oldValue);\r\n        return new Promise((resolve, reject) => {\r\n            if (value) {\r\n                if (props.editing) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n                const params = {\r\n                    fieldName: 'channelId',\r\n                    value,\r\n                };\r\n                checkParamStatusApi(params).then(() => {\r\n                    resolve();\r\n                }).catch((error) => {\r\n                    console.log('validator channelId error: ', error);\r\n                    reject(new Error(messageValue.channelIdExists));\r\n                });\r\n            } else {\r\n                reject(new Error(messageValue.channelIdRequired));\r\n            }\r\n        });\r\n    };\r\n\r\n    const validatorTitle = (rule, value) => {\r\n        value = trimValue('title', value);\r\n        return new Promise((resolve, reject) => {\r\n            if (value) {\r\n                const params = {\r\n                    channelId: field.getValue('channelId'),\r\n                    fieldName: 'title',\r\n                    value,\r\n                };\r\n                checkParamStatusApi(params).then(() => {\r\n                    resolve();\r\n                }).catch((error) => {\r\n                    console.log('validator title error: ', error);\r\n                    reject(new Error(messageValue.titleExists));\r\n                });\r\n            } else {\r\n                reject(new Error(messageValue.titleRequired));\r\n            }\r\n        });\r\n    };\r\n\r\n    const validatorDescription = (rule, oldValue) => {\r\n        trimValue('description', oldValue);\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            title={props.editing ? messageValue.editChannel : messageValue.addChannel}\r\n            visible={props.visible}\r\n            footer={false}\r\n            style={styles.dialog}\r\n            onClose={props.onClose}\r\n        >\r\n            <Form\r\n                {...formItemLayout}\r\n                field={field}\r\n            >\r\n                <FormItem\r\n                    label={messageValue.channelId}\r\n                    required\r\n                    requiredTrigger=\"onBlur\"\r\n                    requiredMessage={messageValue.channelIdRequired}\r\n                    validator={validatorChannelId}\r\n                    validatorTrigger=\"onBlur\"\r\n                    hasFeedback\r\n                >\r\n                    <Input name=\"channelId\" disabled={props.editing} autoFocus placeholder={messageValue.channelIdPlaceholder} />\r\n                </FormItem>\r\n                <FormItem\r\n                    label={messageValue.title}\r\n                    required\r\n                    requiredTrigger=\"onBlur\"\r\n                    requiredMessage={messageValue.titleRequired}\r\n                    validator={validatorTitle}\r\n                    validatorTrigger=\"onBlur\"\r\n                    hasFeedback\r\n                >\r\n                    <Input name=\"title\" placeholder={messageValue.titlePlaceholder} />\r\n                </FormItem>\r\n\r\n                <FormItem\r\n                    label={messageValue.description}\r\n                    validator={validatorDescription}\r\n                    validatorTrigger=\"onBlur\"\r\n                >\r\n                    <Input.TextArea name=\"description\" autoHeight={{ minRows: 2, maxRows: 10 }} placeholder={messageValue.descriptionPlaceholder} />\r\n                </FormItem>\r\n\r\n                <FormItem label={messageValue.collect}>\r\n                    <Checkbox name=\"instantCollect\" defaultChecked={false}>{messageValue.collectDescription}</Checkbox>\r\n                </FormItem>\r\n\r\n                <FormItem {...submitLayout} >\r\n                    <Form.Submit validate type=\"primary\" onClick={props.onSubmit} style={styles.button} loading={props.submitting}>\r\n                        <FormattedMessage id=\"media.base.submit\" />\r\n                    </Form.Submit>\r\n                    <Button type=\"primary\" onClick={props.onClose} style={styles.button}>\r\n                        <FormattedMessage id=\"media.base.cancel\" />\r\n                    </Button>\r\n                </FormItem>\r\n            </Form>\r\n        </Dialog>\r\n    );\r\n});\r\n\r\nconst styles = {\r\n    dialog: {\r\n        width: 800,\r\n    },\r\n    button: {\r\n        margin: '0 10px',\r\n    },\r\n};","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\ChannelManage\\index.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\CollectLogManage\\CollectLogManage.jsx",["400","401","402","403","404","405","406"],"import React, { useState, useEffect } from 'react';\r\nimport IceContainer from '@icedesign/container';\r\nimport { CustomToolBar } from '@skyworthcloud/component';\r\nimport { Loading, Pagination } from '@alifd/next';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport DateUtil from '@/utils/DateUtil';\r\nimport { findCollectLogsApi } from '@/api/collectLogApi';\r\nimport CustomTable from '@/components/CustomTable';\r\nimport '@/common/common-scss.scss';\r\n\r\nfunction CollectLogManage(props) {\r\n    let searchField = null;\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [collectLogs, setCollectLogs] = useState([]);\r\n    const [searchParams, setSearchParams] = useState({});\r\n    const [pageInfo, setPageInfo] = useState({ pageSize: 10, total: 0 });\r\n    const [statusList] = useState([\r\n        {\r\n            value: \"All\",\r\n            label: \"All\",\r\n        },\r\n        {\r\n            value: \"true\",\r\n            label: \"Success\",\r\n        },\r\n        {\r\n            value: \"false\",\r\n            label: \"Failed\",\r\n        },\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        fetchCollectLogData({...searchParams, ...pageInfo});\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchCollectLogData({...searchParams, ...pageInfo, pageNum: 1});\r\n    }, [searchParams]);\r\n\r\n    const columns = [\r\n        {\r\n            title: <FormattedMessage id=\"media.common.channelId\" />,\r\n            dataIndex: 'channelId',\r\n            key: 'channelId',\r\n            width: 100,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.playListId\" />,\r\n            dataIndex: 'playListId',\r\n            key: 'playListId',\r\n            width: 120,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.videoId\" />,\r\n            dataIndex: 'videoId',\r\n            key: 'videoId',\r\n            width: 200,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.url\" />,\r\n            dataIndex: 'url',\r\n            key: 'url',\r\n            width: 200,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.status\" />,\r\n            dataIndex: 'status',\r\n            key: 'status',\r\n            width: 120,\r\n            render: (value) => {\r\n                if (value) {\r\n                    return <span className=\"status-success\">Success</span>;\r\n                } else {\r\n                    return <span className=\"status-failed\">Failed</span>;\r\n                }\r\n            },\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.startTime\" />,\r\n            dataIndex: 'startTime',\r\n            key: 'startTime',\r\n            width: 160,\r\n            render: (value) => {\r\n                if(value) {\r\n                    return <span>{DateUtil.dateFormat('yyyy-MM-dd hh:mm:ss', new Date(value))}</span>;\r\n                }\r\n                return null;\r\n            },\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.endTime\" />,\r\n            dataIndex: 'endTime',\r\n            key: 'endTime',\r\n            width: 160,\r\n            render: (value) => {\r\n                if(value) {\r\n                    return <span>{DateUtil.dateFormat('yyyy-MM-dd hh:mm:ss', new Date(value))}</span>;\r\n                }\r\n                return null;\r\n            },\r\n        },\r\n\r\n    ];\r\n\r\n    const toolBarConfigFun = () => {\r\n        const { intl: { formatMessage } } = props;\r\n        const messageValue = {\r\n            status: formatMessage({ id: 'media.common.status' }),\r\n            search: formatMessage({ id: 'media.base.search' }),\r\n        };\r\n        return [\r\n            {\r\n                label: messageValue.status,\r\n                key: 'status',\r\n                component: 'Select',\r\n                field: 'status',\r\n                defaultValue: \"All\",\r\n                componentProps: {\r\n                    dataSource: statusList,\r\n                },\r\n            },\r\n            {\r\n                label: messageValue.search,\r\n                key: 'search',\r\n                component: 'Button',\r\n                componentProps: {\r\n                    onClick: () => onSearchLog(),\r\n                },\r\n            },\r\n        ];\r\n    };\r\n\r\n    const fetchCollectLogData = (params) => {\r\n        setIsLoading(true);\r\n        findCollectLogsApi(params).then((response) => {\r\n            const { data } = response;\r\n            setCollectLogs(data.data.items);\r\n            setPageInfo(data.data.pageInfo);\r\n        }).catch((error) => {\r\n            console.log('error: ', error);\r\n        }).finally(() => {\r\n            setIsLoading(false);\r\n        });\r\n    };\r\n\r\n    const onPageChange = (pageNum) => {\r\n        setPageInfo({ ...pageInfo, pageNum });\r\n        fetchCollectLogData({ ...searchParams, ...pageInfo, pageNum });\r\n    };\r\n\r\n    const onSearchLog = () => {\r\n        setSearchParams({ ...searchParams, ...searchField.getValues() });\r\n    };\r\n\r\n    return (\r\n        <IceContainer>\r\n            <Loading\r\n                tip=\"loading...\"\r\n                visible={isLoading}\r\n                style={styles.loading}\r\n            >\r\n                <CustomToolBar\r\n                    config={toolBarConfigFun()}\r\n                    getInstance={(childCp) => {\r\n                        if (childCp) {\r\n                            searchField = childCp.getField();\r\n                        }\r\n                    }}\r\n                />\r\n                <CustomTable\r\n                    columns={columns}\r\n                    dataSource={collectLogs}\r\n                    hasBorder={false}\r\n                    isZebra\r\n                />\r\n                <Pagination\r\n                    style={styles.pagination}\r\n                    current={pageInfo.pageNum}\r\n                    pageSize={pageInfo.pageSize}\r\n                    total={pageInfo.total}\r\n                    onChange={onPageChange}\r\n                />\r\n            </Loading>\r\n        </IceContainer>\r\n    );\r\n}\r\n\r\nconst styles = {\r\n    dialog: {\r\n        width: 1500,\r\n    },\r\n    pagination: {\r\n        margin: '20px 0',\r\n        textAlign: 'center',\r\n    },\r\n    loading: {\r\n        width: '100%',\r\n    },\r\n    operationItem: {\r\n        marginRight: '10px',\r\n        textDecoration: 'none',\r\n        color: '#5485F7',\r\n        cursor: 'pointer',\r\n    },\r\n    img: {\r\n        height: 80,\r\n    },\r\n};\r\n\r\nexport default injectIntl(CollectLogManage);","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\CollectLogManage\\index.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\GamingManage\\components\\GamingVideoManage.jsx",["407","408","409","410","411","412","413","414"],"import React, { useState, useEffect } from 'react';\r\nimport IceContainer from '@icedesign/container';\r\nimport { CustomToolBar } from '@skyworthcloud/component';\r\nimport { Loading, Pagination, Dialog } from '@alifd/next';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport eventProxy from '@/utils/eventProxy';\r\nimport CustomTable from '@/components/CustomTable';\r\nimport { findGamingVideosApi } from '@/api/gamingApi';\r\n\r\nimport '@/common/common-scss.scss';\r\n\r\nfunction GamingVideoManage(props) {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [gamingVideos, setGamingVideos] = useState([]);\r\n    const [type, setType] = useState();\r\n    const [pageInfo, setPageInfo] = useState({pageSize: 5, total: 0});\r\n\r\n    useEffect(() => {\r\n        eventProxy.on('viewGamingVideo', (type) => {\r\n            setType(type);\r\n            fetchGamingVideoDataSource(type, pageInfo);\r\n        });\r\n        return () => {\r\n            eventProxy.off('viewGamingVideo');\r\n        };\r\n    }, []);\r\n\r\n    const columns = [\r\n        {\r\n            title: <FormattedMessage id=\"media.common.title\" />,\r\n            dataIndex: 'title',\r\n            key: 'title',\r\n            width: 250,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.videoId\" />,\r\n            dataIndex: 'videoId',\r\n            key: 'videoId',\r\n            width: 250,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.thumbnail\" />,\r\n            dataIndex: 'thumbnail',\r\n            key: 'thumbnail',\r\n            width: 250,\r\n            render: (value) => {\r\n                if(value) {\r\n                    return <img src={value.url} style={styles.img} alt=\"thumbnail\" />;\r\n                }\r\n                return null;\r\n            },\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.owner\" />,\r\n            dataIndex: 'owner',\r\n            key: 'owner',\r\n            width: 250,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.viewCount\" />,\r\n            dataIndex: 'viewCount',\r\n            key: 'viewCount',\r\n            width: 150,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.duration\" />,\r\n            dataIndex: 'duration',\r\n            key: 'duration',\r\n            width: 150,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.badges\" />,\r\n            dataIndex: 'badges',\r\n            key: 'badges',\r\n            width: 150,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.publishedTime\" />,\r\n            dataIndex: 'publishedTime',\r\n            key: 'publishedTime',\r\n            width: 150,\r\n        },\r\n    ];\r\n\r\n    const toolBarConfigFun = () => {\r\n        // const { intl: { formatMessage }, } = props;\r\n        // const messageValue = {\r\n        //     titlePlaceholder: formatMessage({ id: 'media.channel.title.placeholder' }),\r\n        // }\r\n        return [\r\n            // {\r\n            //     label: <FormattedMessage id=\"media.channel.title\" />,\r\n            //     key: 'title',\r\n            //     component: 'Input',\r\n            //     field: 'title',\r\n            //     componentProps: {\r\n            //         placeholder: messageValue.titlePlaceholder,\r\n            //     }\r\n            // },\r\n            // {\r\n            //     label: <FormattedMessage id=\"media.base.search\" />,\r\n            //     key: 'search',\r\n            //     component: 'Button',\r\n            //     componentProps: {\r\n            //         onClick: () => onSearchChannel(),\r\n            //     }\r\n            // },\r\n            // {\r\n            //     label: '即刻采集',\r\n            //     key: 'collect',\r\n            //     component: 'Button',\r\n            //     componentProps: {\r\n            //         disabled: selectKeys.length === 0,\r\n            //         onClick: () => onCollect(),\r\n            //     }\r\n            // },\r\n            // {\r\n            //     label: <FormattedMessage id=\"media.base.add\" />,\r\n            //     key: 'addChannel',\r\n            //     component: 'Button',\r\n            //     componentProps: {\r\n            //         onClick: () => onAddChannel(),\r\n            //     }\r\n            // },\r\n        ];\r\n    };\r\n\r\n    const fetchGamingVideoDataSource = (type, params) => {\r\n        setIsLoading(true);\r\n        findGamingVideosApi(type, params).then((response) => {\r\n            const { data } = response;\r\n            setGamingVideos(data.data.items);\r\n            setPageInfo(data.data.pageInfo);\r\n        }).catch((error) => {\r\n            console.log('error: ', error);\r\n        }).finally(() => {\r\n            setIsLoading(false);\r\n        });\r\n    };\r\n\r\n    const onPageChange = (pageNum) => {\r\n        setPageInfo({...pageInfo, pageNum});\r\n        fetchGamingVideoDataSource(type, {...pageInfo, pageNum});\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            visible={props.visible}\r\n            footer={false}\r\n            isFullScreen\r\n            style={styles.dialog}\r\n            onClose={props.onClose}\r\n        >\r\n            <IceContainer>\r\n            <Loading\r\n                tip=\"loading...\"\r\n                visible={isLoading}\r\n                style={styles.loading}\r\n            >\r\n                <CustomToolBar\r\n                    config={toolBarConfigFun()}\r\n                />\r\n                <CustomTable\r\n                    columns={columns}\r\n                    dataSource={gamingVideos}\r\n                    hasBorder={false}\r\n                    isZebra\r\n                />\r\n                <Pagination\r\n                    style={styles.pagination}\r\n                    type=\"simple\"\r\n                    pageSize={pageInfo.pageSize}\r\n                    total={pageInfo.total}\r\n                    onChange={onPageChange}\r\n                />\r\n            </Loading>\r\n        </IceContainer>\r\n        </Dialog>\r\n        \r\n    );\r\n}\r\n\r\nconst styles = {\r\n    dialog: {\r\n        width: 1500,\r\n    },\r\n    pagination: {\r\n        margin: '20px 0',\r\n        textAlign: 'center',\r\n    },\r\n    loading: {\r\n        width: '100%',\r\n    },\r\n    operationItem: {\r\n        marginRight: '10px',\r\n        textDecoration: 'none',\r\n        color: '#5485F7',\r\n        cursor: 'pointer',\r\n    },\r\n    img: {\r\n        height: 80,\r\n    },\r\n};\r\n\r\nexport default injectIntl(GamingVideoManage);","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\GamingManage\\GamingManage.jsx",["415","416","417","418","419","420","421"],"import React, { useState, useEffect } from 'react';\r\nimport IceContainer from '@icedesign/container';\r\nimport { CustomToolBar } from '@skyworthcloud/component';\r\nimport { Loading, Message } from '@alifd/next';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport eventProxy from '@/utils/eventProxy';\r\nimport CustomTable from '@/components/CustomTable';\r\nimport stores from '@/stores/index';\r\nimport { findGamingTypesApi } from '@/api/gamingApi';\r\nimport GamingVideoManage from './components/GamingVideoManage';\r\nimport { refreshPageVideo } from '@/api/commonApi';\r\n\r\nfunction GamingManage(props) {\r\n    const commonConfig = stores.useStore('commonConfig');\r\n    const { serverUri, operatorId } = commonConfig;\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [dialogVisible, setDialogVisible] = useState(false);\r\n    const [gamingTypes, setGamingTypes] = useState([]);\r\n\r\n    useEffect(() => {\r\n        refreshData();\r\n    }, []);\r\n\r\n    const columns = [\r\n        {\r\n            title: <FormattedMessage id=\"media.common.type\" />,\r\n            dataIndex: 'type',\r\n            key: 'type',\r\n            width: 250,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.item\" />,\r\n            dataIndex: 'num',\r\n            key: 'num',\r\n            width: 250,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.base.operation\" />,\r\n            key: 'operation',\r\n            width: 150,\r\n            render: (value, index, record) => {\r\n                const copyUrl = `${serverUri}/api/v1/dataSource?based=${based}&operatorId=${operatorId}&category=gaming&type=${encodeURIComponent(record.type)}`;\r\n                return (\r\n                    <div>\r\n                        <a\r\n                            style={styles.operationItem}\r\n                            onClick={() => onViewGamingVideo(record)}\r\n                        >\r\n                            <FormattedMessage id=\"media.common.view\" />\r\n                        </a>\r\n                        <a\r\n                            style={styles.operationItem}\r\n                            className=\"clipBtn\"\r\n                            data-clipboard-text={copyUrl}\r\n                        >\r\n                            <FormattedMessage id=\"media.common.copyUrl\" />\r\n                        </a>\r\n                    </div>\r\n                );\r\n            },\r\n        },\r\n    ];\r\n\r\n    const toolBarConfigFun = () => {\r\n        const { intl: { formatMessage } } = props;\r\n        const messageValue = {\r\n            refresh: formatMessage({ id: 'media.common.refresh' }),\r\n        };\r\n        return [\r\n            {\r\n                label: messageValue.refresh,\r\n                key: 'refresh',\r\n                component: 'Button',\r\n                componentProps: {\r\n                    onClick: () => onRefreshPageVideo(),\r\n                },\r\n            },\r\n        ];\r\n    };\r\n\r\n    const fetchGamingTypeDataSource = (params) => {\r\n        setIsLoading(true);\r\n        findGamingTypesApi(params).then((response) => {\r\n            const { data } = response;\r\n            setGamingTypes(data.data.items);\r\n        }).catch((error) => {\r\n            console.log('error: ', error);\r\n        }).finally(() => {\r\n            setIsLoading(false);\r\n        });\r\n    };\r\n\r\n    const refreshData = () => {\r\n        fetchGamingTypeDataSource();\r\n    };\r\n\r\n    const onViewGamingVideo = (gaming) => {\r\n        setDialogVisible(true);\r\n        eventProxy.trigger('viewGamingVideo', gaming.type);\r\n    };\r\n\r\n    const onCloseDialog = () => {\r\n        setDialogVisible(false);\r\n    };\r\n\r\n    const onRefreshPageVideo = () => {\r\n        refreshPageVideo(\"Gaming\", {}).then(() => {\r\n            Message.success('Refresh task submit successfully');\r\n            refreshData();\r\n        }).catch((error) => {\r\n            console.log('refresh page video error', error);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <IceContainer>\r\n            <Loading\r\n                tip=\"loading...\"\r\n                visible={isLoading}\r\n                style={styles.loading}\r\n            >\r\n                <CustomToolBar\r\n                    config={toolBarConfigFun()}\r\n                />\r\n                <CustomTable\r\n                    columns={columns}\r\n                    dataSource={gamingTypes}\r\n                    hasBorder={false}\r\n                    isZebra\r\n                />\r\n                <GamingVideoManage\r\n                    visible={dialogVisible}\r\n                    onClose={onCloseDialog}\r\n                />\r\n            </Loading>\r\n        </IceContainer>\r\n    );\r\n}\r\n\r\nconst styles = {\r\n    pagination: {\r\n        margin: '20px 0',\r\n        textAlign: 'center',\r\n    },\r\n    loading: {\r\n        width: '100%',\r\n    },\r\n    operationItem: {\r\n        marginRight: '10px',\r\n        textDecoration: 'none',\r\n        color: '#5485F7',\r\n        cursor: 'pointer',\r\n    },\r\n};\r\n\r\nexport default injectIntl(GamingManage);","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\GamingManage\\index.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\LiveManage\\components\\LiveVideoManage.jsx",["422","423","424","425","426","427","428","429"],"import React, { useState, useEffect } from 'react';\r\nimport IceContainer from '@icedesign/container';\r\nimport { CustomToolBar } from '@skyworthcloud/component';\r\nimport { Loading, Pagination, Dialog } from '@alifd/next';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport eventProxy from '@/utils/eventProxy';\r\nimport CustomTable from '@/components/CustomTable';\r\nimport { findLiveVideosApi } from '@/api/liveApi';\r\nimport DateUtil from '@/utils/DateUtil';\r\n\r\nimport '@/common/common-scss.scss';\r\n\r\nfunction LiveVideoManage(props) {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [liveVideos, setLiveVideos] = useState([]);\r\n    const [type, setType] = useState();\r\n    const [pageInfo, setPageInfo] = useState({pageSize: 5, total: 0});\r\n\r\n    useEffect(() => {\r\n        eventProxy.on('viewLiveVideo', (type) => {\r\n            setType(type);\r\n            fetchLiveVideoDataSource(type, pageInfo);\r\n        });\r\n        return () => {\r\n            eventProxy.off('viewLiveVideo');\r\n        };\r\n    }, []);\r\n\r\n    const columns = [\r\n        {\r\n            title: <FormattedMessage id=\"media.common.title\" />,\r\n            dataIndex: 'title',\r\n            key: 'title',\r\n            width: 250,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.videoId\" />,\r\n            dataIndex: 'videoId',\r\n            key: 'videoId',\r\n            width: 250,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.thumbnail\" />,\r\n            dataIndex: 'thumbnail',\r\n            key: 'thumbnail',\r\n            width: 250,\r\n            render: (value) => {\r\n                if(value) {\r\n                    return <img src={value.url} style={styles.img} alt=\"thumbnail\" />;\r\n                }\r\n                return null;\r\n            },\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.owner\" />,\r\n            dataIndex: 'owner',\r\n            key: 'owner',\r\n            width: 250,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.viewCount\" />,\r\n            dataIndex: 'viewCount',\r\n            key: 'viewCount',\r\n            width: 150,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.status\" />,\r\n            dataIndex: 'status',\r\n            key: 'status',\r\n            width: 150,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.startTime\" />,\r\n            dataIndex: 'startTime',\r\n            key: 'startTime',\r\n            width: 150,\r\n            render: (value) => {\r\n                if(value) {\r\n                    return <span>{DateUtil.dateFormat('yyyy-MM-dd hh:mm:ss', new Date(value))}</span>;\r\n                }\r\n                return null;\r\n            },\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.badges\" />,\r\n            dataIndex: 'badges',\r\n            key: 'badges',\r\n            width: 150,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.publishedTime\" />,\r\n            dataIndex: 'publishedTime',\r\n            key: 'publishedTime',\r\n            width: 150,\r\n        },\r\n    ];\r\n\r\n    const toolBarConfigFun = () => {\r\n        // const { intl: { formatMessage }, } = props;\r\n        // const messageValue = {\r\n        //     titlePlaceholder: formatMessage({ id: 'media.channel.title.placeholder' }),\r\n        // }\r\n        return [\r\n            // {\r\n            //     label: <FormattedMessage id=\"media.channel.title\" />,\r\n            //     key: 'title',\r\n            //     component: 'Input',\r\n            //     field: 'title',\r\n            //     componentProps: {\r\n            //         placeholder: messageValue.titlePlaceholder,\r\n            //     }\r\n            // },\r\n            // {\r\n            //     label: <FormattedMessage id=\"media.base.search\" />,\r\n            //     key: 'search',\r\n            //     component: 'Button',\r\n            //     componentProps: {\r\n            //         onClick: () => onSearchChannel(),\r\n            //     }\r\n            // },\r\n            // {\r\n            //     label: '即刻采集',\r\n            //     key: 'collect',\r\n            //     component: 'Button',\r\n            //     componentProps: {\r\n            //         disabled: selectKeys.length === 0,\r\n            //         onClick: () => onCollect(),\r\n            //     }\r\n            // },\r\n            // {\r\n            //     label: <FormattedMessage id=\"media.base.add\" />,\r\n            //     key: 'addChannel',\r\n            //     component: 'Button',\r\n            //     componentProps: {\r\n            //         onClick: () => onAddChannel(),\r\n            //     }\r\n            // },\r\n        ];\r\n    };\r\n\r\n    const fetchLiveVideoDataSource = (type, params) => {\r\n        setIsLoading(true);\r\n        findLiveVideosApi(type, params).then((response) => {\r\n            const { data } = response;\r\n            setLiveVideos(data.data.items);\r\n            setPageInfo(data.data.pageInfo);\r\n        }).catch((error) => {\r\n            console.log('error: ', error);\r\n        }).finally(() => {\r\n            setIsLoading(false);\r\n        });\r\n    };\r\n\r\n    const onPageChange = (pageNum) => {\r\n        setPageInfo({...pageInfo, pageNum});\r\n        fetchLiveVideoDataSource(type, {...pageInfo, pageNum});\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            visible={props.visible}\r\n            footer={false}\r\n            isFullScreen\r\n            style={styles.dialog}\r\n            onClose={props.onClose}\r\n        >\r\n            <IceContainer>\r\n            <Loading\r\n                tip=\"loading...\"\r\n                visible={isLoading}\r\n                style={styles.loading}\r\n            >\r\n                <CustomToolBar\r\n                    config={toolBarConfigFun()}\r\n                />\r\n                <CustomTable\r\n                    columns={columns}\r\n                    dataSource={liveVideos}\r\n                    hasBorder={false}\r\n                    isZebra\r\n                />\r\n                <Pagination\r\n                    style={styles.pagination}\r\n                    type=\"simple\"\r\n                    pageSize={pageInfo.pageSize}\r\n                    total={pageInfo.total}\r\n                    onChange={onPageChange}\r\n                />\r\n            </Loading>\r\n        </IceContainer>\r\n        </Dialog>\r\n        \r\n    );\r\n}\r\n\r\nconst styles = {\r\n    dialog: {\r\n        width: 1500,\r\n    },\r\n    pagination: {\r\n        margin: '20px 0',\r\n        textAlign: 'center',\r\n    },\r\n    loading: {\r\n        width: '100%',\r\n    },\r\n    operationItem: {\r\n        marginRight: '10px',\r\n        textDecoration: 'none',\r\n        color: '#5485F7',\r\n        cursor: 'pointer',\r\n    },\r\n    img: {\r\n        height: 80,\r\n    },\r\n};\r\n\r\nexport default injectIntl(LiveVideoManage);","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\LiveManage\\index.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\LiveManage\\LiveManage.jsx",["430","431","432","433","434","435","436"],"import React, { useState, useEffect } from 'react';\r\nimport IceContainer from '@icedesign/container';\r\nimport { CustomToolBar } from '@skyworthcloud/component';\r\nimport { Loading, Message } from '@alifd/next';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport eventProxy from '@/utils/eventProxy';\r\nimport CustomTable from '@/components/CustomTable';\r\nimport stores from '@/stores/index';\r\nimport { findLiveTypesApi } from '@/api/liveApi';\r\nimport LiveVideoManage from './components/LiveVideoManage';\r\nimport { refreshPageVideo } from '@/api/commonApi';\r\n\r\nfunction LiveManage(props) {\r\n    const commonConfig = stores.useStore('commonConfig');\r\n    const { serverUri, operatorId } = commonConfig;\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [dialogVisible, setDialogVisible] = useState(false);\r\n    const [liveTypes, setLiveTypes] = useState([]);\r\n\r\n    useEffect(() => {\r\n        refreshData();\r\n    }, []);\r\n\r\n    const columns = [\r\n        {\r\n            title: <FormattedMessage id=\"media.common.type\" />,\r\n            dataIndex: 'type',\r\n            key: 'type',\r\n            width: 250,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.item\" />,\r\n            dataIndex: 'num',\r\n            key: 'num',\r\n            width: 250,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.base.operation\" />,\r\n            key: 'operation',\r\n            width: 150,\r\n            render: (value, index, record) => {\r\n                const copyUrl = `${serverUri}/api/v1/dataSource?based=${based}&operatorId=${operatorId}&category=live&type=${encodeURIComponent(record.type)}`;\r\n                return (\r\n                    <div>\r\n                        <a\r\n                            style={styles.operationItem}\r\n                        onClick={() => onViewLiveVideo(record)}\r\n                        >\r\n                            <FormattedMessage id=\"media.common.view\" />\r\n                        </a>\r\n                        <a\r\n                            style={styles.operationItem}\r\n                            className=\"clipBtn\"\r\n                            data-clipboard-text={copyUrl}\r\n                        >\r\n                            <FormattedMessage id=\"media.common.copyUrl\" />\r\n                        </a>\r\n                    </div>\r\n                );\r\n            },\r\n        },\r\n    ];\r\n\r\n    const toolBarConfigFun = () => {\r\n        const { intl: { formatMessage } } = props;\r\n        const messageValue = {\r\n            refresh: formatMessage({ id: 'media.common.refresh' }),\r\n        };\r\n        return [\r\n            {\r\n                label: messageValue.refresh,\r\n                key: 'refresh',\r\n                component: 'Button',\r\n                componentProps: {\r\n                    onClick: () => onRefreshPageVideo(),\r\n                },\r\n            },\r\n        ];\r\n    };\r\n\r\n    const fetchLiveTypeDataSource = (params) => {\r\n        setIsLoading(true);\r\n        findLiveTypesApi(params).then((response) => {\r\n            const { data } = response;\r\n            setLiveTypes(data.data.items);\r\n        }).catch((error) => {\r\n            console.log('error: ', error);\r\n        }).finally(() => {\r\n            setIsLoading(false);\r\n        });\r\n    };\r\n\r\n    const refreshData = () => {\r\n        fetchLiveTypeDataSource();\r\n    };\r\n\r\n    const onViewLiveVideo = (Live) => {\r\n        setDialogVisible(true);\r\n        eventProxy.trigger('viewLiveVideo', Live.type);\r\n    };\r\n\r\n    const onCloseDialog = () => {\r\n        setDialogVisible(false);\r\n    };\r\n\r\n    const onRefreshPageVideo = () => {\r\n        refreshPageVideo(\"Live\", {}).then(() => {\r\n            Message.success('Refresh task submit successfully');\r\n            refreshData();\r\n        }).catch((error) => {\r\n            console.log('refresh page video error', error);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <IceContainer>\r\n            <Loading\r\n                tip=\"loading...\"\r\n                visible={isLoading}\r\n                style={styles.loading}\r\n            >\r\n                <CustomToolBar\r\n                    config={toolBarConfigFun()}\r\n                />\r\n                <CustomTable\r\n                    columns={columns}\r\n                    dataSource={liveTypes}\r\n                    hasBorder={false}\r\n                    isZebra\r\n                />\r\n                <LiveVideoManage\r\n                    visible={dialogVisible}\r\n                    onClose={onCloseDialog}\r\n                />\r\n            </Loading>\r\n        </IceContainer>\r\n    );\r\n}\r\n\r\nconst styles = {\r\n    pagination: {\r\n        margin: '20px 0',\r\n        textAlign: 'center',\r\n    },\r\n    loading: {\r\n        width: '100%',\r\n    },\r\n    operationItem: {\r\n        marginRight: '10px',\r\n        textDecoration: 'none',\r\n        color: '#5485F7',\r\n        cursor: 'pointer',\r\n    },\r\n};\r\n\r\nexport default injectIntl(LiveManage);","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\MovieManage\\components\\MovieVideoManage.jsx",["437","438","439","440","441","442","443","444"],"import React, { useState, useEffect } from 'react';\r\nimport IceContainer from '@icedesign/container';\r\nimport { CustomToolBar } from '@skyworthcloud/component';\r\nimport { Loading, Pagination, Dialog } from '@alifd/next';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport eventProxy from '@/utils/eventProxy';\r\nimport CustomTable from '@/components/CustomTable';\r\nimport { findMovieVideosApi } from '@/api/movieApi';\r\n\r\nimport '@/common/common-scss.scss';\r\n\r\nfunction MovieVideoManage(props) {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [movieVideos, setMovieVideos] = useState([]);\r\n    const [type, setType] = useState();\r\n    const [pageInfo, setPageInfo] = useState({pageSize: 5, total: 0});\r\n\r\n    useEffect(() => {\r\n        eventProxy.on('viewMovieVideo', (type) => {\r\n            setType(type);\r\n            fetchMovieVideoDataSource(type, pageInfo);\r\n        });\r\n        return () => {\r\n            eventProxy.off('viewMovieVideo');\r\n        };\r\n    }, []);\r\n\r\n    const columns = [\r\n        {\r\n            title: <FormattedMessage id=\"media.common.title\" />,\r\n            dataIndex: 'title',\r\n            key: 'title',\r\n            width: 250,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.videoId\" />,\r\n            dataIndex: 'videoId',\r\n            key: 'videoId',\r\n            width: 250,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.thumbnail\" />,\r\n            dataIndex: 'thumbnail',\r\n            key: 'thumbnail',\r\n            width: 250,\r\n            render: (value) => {\r\n                if(value) {\r\n                    return <img src={value.url} style={styles.img} alt=\"thumbnail\" />;\r\n                }\r\n                return null;\r\n            },\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.duration\" />,\r\n            dataIndex: 'duration',\r\n            key: 'duration',\r\n            width: 150,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.badges\" />,\r\n            dataIndex: 'badges',\r\n            key: 'badges',\r\n            width: 150,\r\n        },\r\n    ];\r\n\r\n    const toolBarConfigFun = () => {\r\n        // const { intl: { formatMessage }, } = props;\r\n        // const messageValue = {\r\n        //     refresh: formatMessage({ id: 'media.common.refresh' }),\r\n        // }\r\n        return [\r\n        ];\r\n    };\r\n\r\n    const fetchMovieVideoDataSource = (type, params) => {\r\n        setIsLoading(true);\r\n        findMovieVideosApi(type, params).then((response) => {\r\n            const { data } = response;\r\n            setMovieVideos(data.data.items);\r\n            setPageInfo(data.data.pageInfo);\r\n        }).catch((error) => {\r\n            console.log('error: ', error);\r\n        }).finally(() => {\r\n            setIsLoading(false);\r\n        });\r\n    };\r\n\r\n    const onPageChange = (pageNum) => {\r\n        setPageInfo({...pageInfo, pageNum});\r\n        fetchMovieVideoDataSource(type, {...pageInfo, pageNum});\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            visible={props.visible}\r\n            footer={false}\r\n            isFullScreen\r\n            style={styles.dialog}\r\n            onClose={props.onClose}\r\n        >\r\n            <IceContainer>\r\n            <Loading\r\n                tip=\"loading...\"\r\n                visible={isLoading}\r\n                style={styles.loading}\r\n            >\r\n                <CustomToolBar\r\n                    config={toolBarConfigFun()}\r\n                />\r\n                <CustomTable\r\n                    columns={columns}\r\n                    dataSource={movieVideos}\r\n                    hasBorder={false}\r\n                    isZebra\r\n                />\r\n                <Pagination\r\n                    style={styles.pagination}\r\n                    type=\"simple\"\r\n                    pageSize={pageInfo.pageSize}\r\n                    total={pageInfo.total}\r\n                    onChange={onPageChange}\r\n                />\r\n            </Loading>\r\n        </IceContainer>\r\n        </Dialog>\r\n        \r\n    );\r\n}\r\n\r\nconst styles = {\r\n    dialog: {\r\n        width: 1500,\r\n    },\r\n    pagination: {\r\n        margin: '20px 0',\r\n        textAlign: 'center',\r\n    },\r\n    loading: {\r\n        width: '100%',\r\n    },\r\n    operationItem: {\r\n        marginRight: '10px',\r\n        textDecoration: 'none',\r\n        color: '#5485F7',\r\n        cursor: 'pointer',\r\n    },\r\n    img: {\r\n        height: 80,\r\n    },\r\n};\r\n\r\nexport default injectIntl(MovieVideoManage);","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\MovieManage\\index.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\MovieManage\\MovieManage.jsx",["445","446","447","448","449","450","451"],"import React, { useState, useEffect } from 'react';\r\nimport IceContainer from '@icedesign/container';\r\nimport { CustomToolBar } from '@skyworthcloud/component';\r\nimport { Loading, Message } from '@alifd/next';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport CustomTable from '@/components/CustomTable';\r\nimport eventProxy from '@/utils/eventProxy';\r\nimport stores from '@/stores/index';\r\nimport { findMovieTypesApi } from '@/api/movieApi';\r\nimport MovieVideoManage from './components/MovieVideoManage';\r\nimport { refreshPageVideo } from '@/api/commonApi';\r\n\r\nfunction MovieManage(props) {\r\n    const commonConfig = stores.useStore('commonConfig');\r\n    const { serverUri, operatorId } = commonConfig;\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [dialogVisible, setDialogVisible] = useState(false);\r\n    const [movieTypes, setMovieTypes] = useState([]);\r\n\r\n    useEffect(() => {\r\n        refreshData();\r\n    }, []);\r\n\r\n    const columns = [\r\n        {\r\n            title: <FormattedMessage id=\"media.common.type\" />,\r\n            dataIndex: 'type',\r\n            key: 'type',\r\n            width: 250,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.item\" />,\r\n            dataIndex: 'num',\r\n            key: 'num',\r\n            width: 250,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.base.operation\" />,\r\n            key: 'operation',\r\n            width: 150,\r\n            render: (value, index, record) => {\r\n                const copyUrl = `${serverUri}/api/v1/dataSource?based=${based}&operatorId=${operatorId}&category=movie&type=${encodeURIComponent(record.type)}`;\r\n                return (\r\n                    <div>\r\n                        <a\r\n                            style={styles.operationItem}\r\n                        onClick={() => onViewMovieVideo(record)}\r\n                        >\r\n                            <FormattedMessage id=\"media.common.view\" />\r\n                        </a>\r\n                        <a\r\n                            style={styles.operationItem}\r\n                            className=\"clipBtn\"\r\n                            data-clipboard-text={copyUrl}\r\n                        >\r\n                            <FormattedMessage id=\"media.common.copyUrl\" />\r\n                        </a>\r\n                    </div>\r\n                );\r\n            },\r\n        },\r\n    ];\r\n\r\n    const toolBarConfigFun = () => {\r\n        const { intl: { formatMessage } } = props;\r\n        const messageValue = {\r\n            refresh: formatMessage({ id: 'media.common.refresh' }),\r\n        };\r\n        return [\r\n            {\r\n                label: messageValue.refresh,\r\n                key: 'refresh',\r\n                component: 'Button',\r\n                componentProps: {\r\n                    onClick: () => onRefreshPageVideo(),\r\n                },\r\n            },\r\n        ];\r\n    };\r\n\r\n    const fetchMovieTypeDataSource = (params) => {\r\n        setIsLoading(true);\r\n        findMovieTypesApi(params).then((response) => {\r\n            const { data } = response;\r\n            setMovieTypes(data.data.items);\r\n        }).catch((error) => {\r\n            console.log('error: ', error);\r\n        }).finally(() => {\r\n            setIsLoading(false);\r\n        });\r\n    };\r\n\r\n    const refreshData = () => {\r\n        fetchMovieTypeDataSource();\r\n    };\r\n\r\n    const onViewMovieVideo = (Movie) => {\r\n        setDialogVisible(true);\r\n        eventProxy.trigger('viewMovieVideo', Movie.type);\r\n    };\r\n\r\n    const onCloseDialog = () => {\r\n        setDialogVisible(false);\r\n    };\r\n\r\n    const onRefreshPageVideo = () => {\r\n        refreshPageVideo(\"Movie\", {}).then(() => {\r\n            Message.success('Refresh task submit successfully');\r\n            refreshData();\r\n        }).catch((error) => {\r\n            console.log('refresh page video error', error);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <IceContainer>\r\n            <Loading\r\n                tip=\"loading...\"\r\n                visible={isLoading}\r\n                style={styles.loading}\r\n            >\r\n                <CustomToolBar\r\n                    config={toolBarConfigFun()}\r\n                />\r\n                <CustomTable\r\n                    columns={columns}\r\n                    dataSource={movieTypes}\r\n                    hasBorder={false}\r\n                    isZebra\r\n                />\r\n                <MovieVideoManage\r\n                    visible={dialogVisible}\r\n                    onClose={onCloseDialog}\r\n                />\r\n            </Loading>\r\n        </IceContainer>\r\n    );\r\n}\r\n\r\nconst styles = {\r\n    pagination: {\r\n        margin: '20px 0',\r\n        textAlign: 'center',\r\n    },\r\n    loading: {\r\n        width: '100%',\r\n    },\r\n    operationItem: {\r\n        marginRight: '10px',\r\n        textDecoration: 'none',\r\n        color: '#5485F7',\r\n        cursor: 'pointer',\r\n    },\r\n};\r\n\r\nexport default injectIntl(MovieManage);","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\PlayListManage\\components\\PlayListEditDialog.jsx",["452","453","454"],"import React, { useEffect } from 'react';\r\nimport { Dialog, Form, Field, Input, Button } from '@alifd/next';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport eventProxy from '@/utils/eventProxy';\r\n\r\nconst FormItem = Form.Item;\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        span: 4,\r\n    },\r\n    wrapperCol: {\r\n        span: 16,\r\n    },\r\n};\r\n\r\nconst submitLayout = {\r\n    wrapperCol: {\r\n        offset: 9,\r\n    },\r\n};\r\n\r\nexport default injectIntl(function PlayListEditDialog(props) {\r\n    const field = Field.useField();\r\n\r\n    useEffect(() => {\r\n        eventProxy.on('editPlayList', (playList) => {\r\n            field.setValue('playListId', playList.playListId);\r\n            field.setValue('title', playList.title);\r\n            field.setValue('description', playList.description);\r\n        });\r\n\r\n        return () => {\r\n            eventProxy.off('editPlayList');\r\n        };\r\n    });\r\n\r\n    const { intl: { formatMessage } } = props;\r\n    const messageValue = {\r\n        editPlayList: formatMessage({ id: 'media.playList.edit' }),\r\n        title: formatMessage({ id: 'media.playList.title' }),\r\n        titleRequired: formatMessage({ id: 'media.playList.title.required' }),\r\n        titlePlaceholder: formatMessage({ id: 'media.playList.title.placeholder' }),\r\n        description: formatMessage({ id: 'media.playList.description' }),\r\n        descriptionPlaceholder: formatMessage({ id: 'media.playList.description.placeholder' }),\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            title={messageValue.editPlayList}\r\n            visible={props.visible}\r\n            isFullScreen\r\n            footer={false}\r\n            style={styles.dialog}\r\n            onClose={props.onClose}\r\n        >\r\n            <Form\r\n                {...formItemLayout}\r\n                field={field}\r\n            >\r\n                <Input name=\"playListId\" htmlType=\"hidden\" />\r\n                <FormItem\r\n                    label={messageValue.title}\r\n                    required\r\n                    requiredTrigger=\"onBlur\"\r\n                    requiredMessage={messageValue.titleRequired}\r\n                    hasFeedback\r\n                >\r\n                    <Input name=\"title\" placeholder={messageValue.titlePlaceholder} />\r\n                </FormItem>\r\n\r\n                <FormItem\r\n                    label={messageValue.description}\r\n                >\r\n                    <Input.TextArea name=\"description\" autoHeight={{ minRows: 2, maxRows: 10 }} placeholder={messageValue.descriptionPlaceholder} />\r\n                </FormItem>\r\n\r\n                <FormItem {...submitLayout} >\r\n                    <Form.Submit validate type=\"primary\" onClick={props.onSubmit} style={styles.button} loading={props.submitting}>\r\n                        <FormattedMessage id=\"media.base.submit\" />\r\n                    </Form.Submit>\r\n                    <Button type=\"primary\" onClick={props.onClose} style={styles.button}>\r\n                        <FormattedMessage id=\"media.base.cancel\" />\r\n                    </Button>\r\n                </FormItem>\r\n            </Form>\r\n        </Dialog>\r\n    );\r\n});\r\n\r\nconst styles = {\r\n    dialog: {\r\n        width: 800,\r\n    },\r\n    button: {\r\n        margin: '0 10px',\r\n    },\r\n};","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\PlayListManage\\components\\PosterManageDialog.jsx",["455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473"],"import React, { useState } from 'react';\r\nimport { Upload, Dialog, Balloon, Button, Message } from '@alifd/next';\r\nimport IcePanel from '@icedesign/panel';\r\nimport { injectIntl } from 'react-intl';\r\nimport '@/common/common-scss.scss';\r\nimport { deletePosterApi, updateDefaultPosterApi } from '@/api/commonApi';\r\n\r\nfunction PosterManageDialog(props) {\r\n    const { playList } = props;\r\n    const [dialogVisible, setVisible] = useState(false);\r\n    const [posters, setPosters] = useState([]);\r\n    const [defaultPoster, setDefaultPoster] = useState();\r\n    const [bigPosters, setBigPosters] = useState([]);\r\n    const [defaultBigPoster, setDefaultBigPoster] = useState();\r\n    const [emptyPoster, setEmptyPoster] = useState([]);\r\n\r\n    const { intl: { formatMessage } } = props;\r\n    const messageValue = {\r\n        poster: formatMessage({ id: 'media.playList.poster' }),\r\n        posterManage: formatMessage({ id: 'media.playList.poster.manage' }),\r\n        posters: formatMessage({ id: 'media.playList.poster.posters' }),\r\n        defaultPoster: formatMessage({ id: 'media.playList.poster.defaultPoster' }),\r\n        bigPosters: formatMessage({ id: 'media.playList.poster.bigPosters' }),\r\n        defaultBigPoster: formatMessage({ id: 'media.playList.poster.defaultBigPoster' }),\r\n        upload: formatMessage({ id: 'media.base.upload' }),\r\n        setDefault: formatMessage({ id: 'media.base.setDefualt' }),\r\n        setDefaultSuccess: formatMessage({ id: 'media.base.setDefualt.success' }),\r\n        setDefaultFailed: formatMessage({ id: 'media.base.setDefualt.failed' }),\r\n        delete: formatMessage({ id: 'media.base.delete' }),\r\n        delSuccess: formatMessage({ id: 'media.base.delete.success' }),\r\n        delFailed: formatMessage({ id: 'media.base.delete.failed' }),\r\n        uploadSuccess: formatMessage({ id: 'media.base.upload.success' }),\r\n        uploadFailed: formatMessage({ id: 'media.base.upload.failed' }),\r\n        delDefaultFailed: formatMessage({ id: 'media.playList.poster.default.delete.failed' }),\r\n    };\r\n\r\n    const onOpen = (playList) => {\r\n        setDefaultPoster(playList.defaultPoster);\r\n        const posters = playList.posters.map((poster, index) => {\r\n            return {\r\n                index,\r\n                pictureId: poster.pictureId,\r\n                name: buildImgName(poster),\r\n                state: 'done',\r\n                url: poster.url,\r\n            };\r\n        });\r\n        setPosters(posters);\r\n        const bigPosters = playList.bigPosters.map((bigPoster, index) => {\r\n            return {\r\n                index,\r\n                pictureId: bigPoster.pictureId,\r\n                name: buildImgName(bigPoster),\r\n                state: 'done',\r\n                url: bigPoster.url,\r\n            };\r\n        });\r\n        setDefaultBigPoster(playList.defaultBigPoster);\r\n        setBigPosters(bigPosters);\r\n        setVisible(true);\r\n    };\r\n\r\n    const buildImgName = (poster) => {\r\n        const pointIndex = poster.url.lastIndexOf(\".\");\r\n        const lastIndex = poster.url.lastIndexOf(\"?\");\r\n        let suffix;\r\n        if (lastIndex !== -1) {\r\n            suffix = poster.url.substring(pointIndex, lastIndex);\r\n        } else {\r\n            suffix = poster.url.substring(pointIndex);\r\n        }\r\n        return `${poster.width  } * ${  poster.height  }${suffix}`;\r\n    };\r\n\r\n    const onClose = () => {\r\n        setVisible(false);\r\n    };\r\n\r\n    const beforeUpload = () => {\r\n        // console.log('beforeUpload: ', file, options)\r\n    };\r\n\r\n    const onSuccess = (info, type) => {\r\n        Message.success(messageValue.uploadSuccess);\r\n        const newPosters = type === 'posters' ? posters : bigPosters;\r\n        const data = info.response.poster;\r\n        const poster = {\r\n            name: buildImgName(data),\r\n            pictureId: data.pictureId,\r\n            state: 'done',\r\n            index: newPosters.length,\r\n            url: info.imgURL,\r\n        };\r\n        playList[type].push(data);\r\n        newPosters.push(poster);\r\n        if (type === 'posters') {\r\n            setPosters([...newPosters]);\r\n        } else {\r\n            setBigPosters([...newPosters]);\r\n        }\r\n    };\r\n\r\n    const onRemove = () => {\r\n        \r\n    };\r\n\r\n    const onError = (info) => {\r\n        console.log('onError', info);\r\n        Message.error(messageValue.uploadFailed);\r\n        setEmptyPoster([]);\r\n    };\r\n\r\n    const formatter = (res) => {\r\n        // 函数里面根据当前服务器返回的响应数据\r\n        // 重新拼装符合组件要求的数据格式\r\n        return {\r\n            success: res.status === 200,\r\n            url: res.data.url,\r\n            poster: res.data,\r\n        };\r\n    };\r\n\r\n    const onPosterSuccess = (info) => {\r\n        onSuccess(info, 'posters');\r\n    };\r\n\r\n    const onPosterRemove = (info) => {\r\n        return onRemove(info, 'posters');\r\n    };\r\n\r\n    const onBigPosterSuccess = (info) => {\r\n        onSuccess(info, 'bigPosters');\r\n    };\r\n\r\n    const onBigPosterRemove = (info) => {\r\n        return onRemove(info, 'bigPosters');\r\n    };\r\n\r\n    const onShowDefaultPoster = (defaultPoster) => {\r\n        if (defaultPoster) {\r\n            const imgHtml = (<img className=\"poster-img\" src={defaultPoster.url} alt=\"\" />);\r\n            return (<div className=\"poster-items-div\">\r\n                <Balloon trigger={imgHtml} align=\"t\" closable={false} needAdjust shouldUpdatePosition triggerType=\"hover\" >\r\n                    <img className=\"poster-ballon-img\" src={defaultPoster.url} alt=\"\" />\r\n                </Balloon>\r\n                <span>{buildImgName(defaultPoster)}</span>\r\n            </div>);\r\n        }\r\n        return null;\r\n    };\r\n\r\n    const onShowPoster = (posters, type) => {\r\n        if (posters) {\r\n            const posterHtml = (posters.map((poster, index) => {\r\n                const imgHtml = (<img key={index} className=\"poster-img\" src={poster.url} alt=\"\" />);\r\n                return (<div key={index} className=\"poster-items-div\">\r\n                    <Balloon trigger={imgHtml} align=\"t\" closable={false} needAdjust shouldUpdatePosition triggerType=\"hover\" >\r\n                        <img key={index} className=\"poster-ballon-img\" src={poster.url} alt=\"\"/>\r\n                    </Balloon>\r\n                    <span>{poster.name}</span>\r\n                    <div className=\"poster-button-div\">\r\n                        <Button size=\"small\" className=\"poster-button\" disabled={poster.pictureId === (type === \"posters\" ? defaultPoster.pictureId : defaultBigPoster.pictureId)} onClick={() => onSetDefaultPoster(poster, type)}>{messageValue.setDefault}</Button>\r\n                        <Button size=\"small\" className=\"poster-button\" onClick={() => onRemovePoster(poster, type)}>{messageValue.delete}</Button>\r\n                    </div>\r\n                </div>);\r\n            }));\r\n            return (<div className=\"poster-outside-div\">\r\n                {posterHtml}\r\n            </div>);\r\n        }\r\n        return null;\r\n    };\r\n\r\n    const onRemovePoster = (poster, type) => {\r\n        const data = {\r\n            category: 'playList',\r\n            type,\r\n            url: poster.url,\r\n            pictureId: poster.pictureId,\r\n        };\r\n        deletePosterApi(playList.playListId, data).then(() => {\r\n            let newPosters = type === 'posters' ? posters : bigPosters;\r\n            playList[type].splice(poster.index, 1);\r\n            newPosters.splice(poster.index, 1);\r\n            newPosters = newPosters.map((poster, index) => {\r\n                return {\r\n                    index,\r\n                    pictureId: poster.pictureId,\r\n                    name: poster.name,\r\n                    state: 'done',\r\n                    url: poster.url,\r\n                };\r\n            });\r\n            if (type === 'posters') {\r\n                setPosters([...newPosters]);\r\n            } else {\r\n                setBigPosters([...newPosters]);\r\n            }\r\n            Message.success(messageValue.delSuccess);\r\n            return true;\r\n        }).catch((error) => {\r\n            const { data } = error;\r\n            if (data.status === 50001) {\r\n                Message.error(messageValue.delDefaultFailed);\r\n            } else {\r\n                Message.error(messageValue.delFailed);\r\n            }\r\n            console.log(`remove ${  type  } error.`, error);\r\n            return false;\r\n        });\r\n    };\r\n\r\n    const onSetDefaultPoster = (defaultPoster, type) => {\r\n        const currentDefault = playList[type][defaultPoster.index];\r\n        const updateData = {\r\n            category: 'playList',\r\n            type,\r\n            pictureId: currentDefault.pictureId,\r\n        };\r\n        updateDefaultPosterApi(playList.playListId, updateData).then((response) => {\r\n            const { data } = response;\r\n            if (type === 'posters') {\r\n                setDefaultPoster(data.data);\r\n                playList.defaultPoster = data.data;\r\n            } else {\r\n                setDefaultBigPoster(data.data);\r\n                playList.defaultBigPoster = data.data;\r\n            }\r\n            Message.success(messageValue.setDefaultSuccess);\r\n            return true;\r\n        }).catch((error) => {\r\n            Message.error(messageValue.setDefaultFailed);\r\n            console.log('set default poster error', error);\r\n            return false;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div style={styles.posterManage}>\r\n            <a\r\n                style={styles.operationItem}\r\n                onClick={() => onOpen(playList)}\r\n            >\r\n                {messageValue.poster}\r\n            </a>\r\n            <Dialog\r\n                title={messageValue.posterManage}\r\n                visible={dialogVisible}\r\n                isFullScreen\r\n                footer={false}\r\n                style={styles.dialog}\r\n                onClose={onClose}\r\n            >\r\n                <div>\r\n                    <IcePanel style={styles.pannel}>\r\n                        <IcePanel.Header>\r\n                            {messageValue.defaultPoster}\r\n                        </IcePanel.Header>\r\n                        <IcePanel.Body>\r\n                            {onShowDefaultPoster(defaultPoster)}\r\n                        </IcePanel.Body>\r\n                    </IcePanel>\r\n                    <IcePanel style={styles.pannel}>\r\n                        <IcePanel.Header>\r\n                            {messageValue.posters}\r\n                        </IcePanel.Header>\r\n                        <IcePanel.Body>\r\n                            <div>\r\n                                {onShowPoster(posters, 'posters')}\r\n                            </div>\r\n                            <Upload.Card\r\n                                listType=\"card\"\r\n                                // eslint-disable-next-line no-undef\r\n                                action={`/youtube-media/api/v1/posters`}\r\n                                accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\r\n                                data={{ resourceId: playList.playListId, category: 'playList', type: 'posters' }}\r\n                                beforeUpload={beforeUpload}\r\n                                onSuccess={onPosterSuccess}\r\n                                onError={onError}\r\n                                onRemove={onPosterRemove}\r\n                                formatter={formatter}\r\n                                value={emptyPoster}\r\n                            >\r\n                                <span>{messageValue.upload}</span>\r\n                            </Upload.Card>\r\n                        </IcePanel.Body>\r\n                    </IcePanel>\r\n                    <IcePanel style={styles.pannel}>\r\n                        <IcePanel.Header>\r\n                            {messageValue.setDefaultBigPoster}\r\n                        </IcePanel.Header>\r\n                        <IcePanel.Body>\r\n                            {onShowDefaultPoster(defaultBigPoster)}\r\n                        </IcePanel.Body>\r\n                    </IcePanel>\r\n                    <IcePanel style={styles.pannel}>\r\n                        <IcePanel.Header>\r\n                            {messageValue.bigPosters}\r\n                        </IcePanel.Header>\r\n                        <IcePanel.Body>\r\n                            <div>\r\n                                {onShowPoster(bigPosters, 'bigPosters')}\r\n                            </div>\r\n                            <Upload.Card\r\n                                listType=\"card\"\r\n                                // eslint-disable-next-line no-undef\r\n                                action={`/youtube-media/api/v1/posters`}\r\n                                accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\r\n                                data={{ resourceId: playList.playListId, category: 'playList', type: 'bigPosters' }}\r\n                                beforeUpload={beforeUpload}\r\n                                onSuccess={onBigPosterSuccess}\r\n                                onError={onError}\r\n                                onRemove={onBigPosterRemove}\r\n                                formatter={formatter}\r\n                                value={emptyPoster}\r\n                            >\r\n                                <span>{messageValue.upload}</span>\r\n                            </Upload.Card>\r\n                        </IcePanel.Body>\r\n                    </IcePanel>\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst styles = {\r\n    loading: {\r\n        width: '100%',\r\n    },\r\n    posterManage: {\r\n        display: 'inline-block',\r\n    },\r\n    dialog: {\r\n        width: 1000,\r\n    },\r\n    operationItem: {\r\n        marginRight: '10px',\r\n        textDecoration: 'none',\r\n        color: '#5485F7',\r\n        cursor: 'pointer',\r\n    },\r\n    pannel: {\r\n        margin: '10px 0px',\r\n    },\r\n};\r\n\r\nexport default injectIntl(PosterManageDialog);","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\PlayListManage\\index.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\PlayListManage\\PlayListManage.jsx",["474","475","476","477","478","479","480","481","482","483","484","485","486"],"import React, { useState, useEffect } from 'react';\nimport { Loading, Pagination, Dialog, Message } from '@alifd/next';\nimport { CustomToolBar } from '@skyworthcloud/component';\nimport IceContainer from '@icedesign/container/lib/IceContainer';\nimport clonedeep from 'lodash.clonedeep';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport CustomTable from '@/components/CustomTable';\nimport { findChannelsApi, instantCollectApi } from '@/api/channelApi';\nimport { findPlayListsApi, deletePlayListInfoApi, savePlayListInfoApi } from '@/api/playListApi';\nimport PlayListEditDialog from './components/PlayListEditDialog';\nimport eventProxy from '@/utils/eventProxy';\nimport PosterManageDialog from './components/PosterManageDialog';\nimport '@/common/common-scss.scss';\n\nfunction PlayListManage(props) {\n\n    let searchField = null;\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [dialogVisible, setDialogVisible] = useState(false);\n    const [saveSubmitting, setSaveSubmitting] = useState(false);\n    const [searchParams, setSearchParams] = useState({});\n    const [channels, setChannels] = useState([]);\n    const [playLists, setPlayLists] = useState([]);\n    const [pageInfo, setPageInfo] = useState({ pageSize: 7, total: 0 });\n    const [selectKeys, setSelectKeys] = useState([]);\n\n    useEffect(() => {\n        fetchChannelData();\n    }, []);\n\n    useEffect(() => {\n        if (searchParams.channelId) {\n            const params = {\n                ...searchParams,\n                ...pageInfo,\n                pageNum: 1,\n            };\n            fetchPlayListData(params);\n        }\n    }, [searchParams]);\n\n    const columns = [\n        {\n            title: <FormattedMessage id=\"media.playList.title\" />,\n            dataIndex: 'title',\n            key: 'title',\n            lock: 'left',\n            width: 250,\n        },\n        {\n            title: <FormattedMessage id=\"media.playList.playListId\" />,\n            dataIndex: 'playListId',\n            key: 'playListId',\n            width: 250,\n        },\n        {\n            title: <FormattedMessage id=\"media.playList.channel\" />,\n            dataIndex: 'channelId',\n            key: 'channelId',\n            width: 250,\n            render: (value, index, record) => {\n                const channel = channels.find(item => item.value === record.channelId);\n                return (\n                    <span>{channel ? channel.label : record.channelId}</span>\n                );\n            },\n        },\n        {\n            title: <FormattedMessage id=\"media.playList.description\" />,\n            dataIndex: 'description',\n            key: 'description',\n            width: 850,\n            render: (value, index, record) => {\n                return (\n                    <div className=\"tags-description\">\n                        <span title={record.description}>{record.description}</span>\n                    </div>\n                );\n            },\n        },\n        {\n            title: <FormattedMessage id=\"media.base.operation\" />,\n            key: 'operation',\n            width: 200,\n            lock: 'right',\n            render: (value, index, record) => {\n                return (\n                    <div>\n                        <a\n                            style={styles.operationItem}\n                            onClick={() => onEditPlayList(record)}\n                        >\n                            <FormattedMessage id=\"media.base.edit\" />\n                        </a>\n                        <PosterManageDialog\n                            playList={record}\n                        />\n                        <a\n                            style={styles.operationItem}\n                            onClick={() => onDeletePlayList(record)}\n                        >\n                            <FormattedMessage id=\"media.base.delete\" />\n                        </a>\n                    </div>\n                );\n            },\n        },\n    ];\n\n    const toolBarConfigFun = () => {\n        const { intl: { formatMessage } } = props;\n        const messageValue = {\n            titlePlaceholder: formatMessage({ id: 'media.playList.title.placeholder' }),\n            tagsPlaceholder: formatMessage({ id: 'media.playList.tags.placeholder' }),\n        };\n        return [\n            {\n                label: <FormattedMessage id=\"media.playList.channel\" />,\n                key: 'channelId',\n                component: 'Select',\n                field: 'channelId',\n                // defaultValue: searchParams.channelId,\n                componentProps: {\n                    dataSource: channels,\n                    style: {\n                        width: 150,\n                    },\n                },\n            },\n            {\n                label: <FormattedMessage id=\"media.playList.title\" />,\n                key: 'title',\n                component: 'Input',\n                field: 'title',\n                componentProps: {\n                    placeholder: messageValue.titlePlaceholder,\n                },\n            },\n            {\n                label: <FormattedMessage id=\"media.base.search\" />,\n                key: 'search',\n                component: 'Button',\n                componentProps: {\n                    onClick: () => onSearchPlayList(),\n                },\n            },\n            {\n                label: <FormattedMessage id=\"media.channel.collect\" />,\n                key: 'collect',\n                component: 'Button',\n                componentProps: {\n                    disabled: selectKeys.length === 0,\n                    onClick: () => onCollect(),\n                },\n            },\n        ];\n    };\n\n    const rowSelection = {\n        onChange: (selectedRowKeys) => {\n            setSelectKeys(selectedRowKeys);\n        },\n        selectedRowKeys: selectKeys,\n    };\n\n    const fetchChannelData = () => {\n        const params = {\n            pageSize: 100,\n        };\n        setIsLoading(true);\n        findChannelsApi(params).then((response) => {\n            const { data } = response;\n            const channels = data.data.items.map((channel) => {\n                return {\n                    label: channel.title,\n                    value: channel.channelId,\n                };\n            });\n            setChannels(channels);\n            if (channels.length > 0) {\n                const channelId = channels[0].value;\n                searchField.setValue('channelId', channelId);\n                setSearchParams({ ...searchParams, channelId });\n            }\n        }).catch((error) => {\n            console.log('fetch channel data error: ', error);\n        }).finally(() => {\n            setIsLoading(false);\n        });\n    };\n\n    const fetchPlayListData = (params) => {\n        setIsLoading(true);\n        findPlayListsApi(params).then((response) => {\n            const { data } = response;\n            setPlayLists(data.data.items);\n            setPageInfo(data.data.pageInfo);\n        }).catch((error) => {\n            setPlayLists([]);\n            console.log('fetch playList data error: ', error);\n        }).finally(() => {\n            setIsLoading(false);\n        });\n    };\n\n    const refreshData = () => {\n        const params = {\n            ...searchParams,\n            ...pageInfo,\n            pageNum: 1,\n        };\n        setSelectKeys([]);\n        fetchPlayListData(params);\n    };\n\n    const onCollect = () => {\n        const params = {\n            ids: selectKeys.join(','),\n            type: 'playList',\n        };\n        const { intl: { formatMessage } } = props;\n        const messageValue = {\n            success: formatMessage({ id: 'media.channel.collect.success' }),\n            failed: formatMessage({ id: 'media.channel.collect.failed' }),\n        };\n        instantCollectApi(params).then(() => {\n            Message.success(messageValue.success);\n            setSelectKeys([]);\n        }).catch((error) => {\n            Message.error(messageValue.failed);\n            console.log('Instant collect from playList error', error);\n        });\n    };\n\n    const onSearchPlayList = () => {\n        setSelectKeys([]);\n        setSearchParams({ ...searchParams, ...searchField.getValues() });\n    };\n\n    const onPageChange = (pageNum) => {\n        setPageInfo({ ...pageInfo, pageNum });\n        setSelectKeys([]);\n        fetchPlayListData({ ...searchParams, ...pageInfo, pageNum });\n    };\n\n    const onEditPlayList = (record) => {\n        setDialogVisible(true);\n        const playList = clonedeep(record);\n        eventProxy.trigger('editPlayList', playList);\n    };\n\n    const onDeletePlayList = (record) => {\n        const { intl: { formatMessage } } = props;\n        const messageValue = {\n            title: formatMessage({ id: 'media.playList.delete.title' }),\n            content: formatMessage({ id: 'media.playList.delete.content' }),\n            success: formatMessage({ id: 'media.base.delete.success' }),\n            failed: formatMessage({ id: 'media.base.delete.failed' }),\n        };\n        Dialog.confirm({\n            title: messageValue.title,\n            content: messageValue.content,\n            footerAlign: 'center',\n            onOk: () => {\n                return new Promise((resolve) => {\n                    deletePlayListInfoApi(record.playListId).then(() => {\n                        Message.success(messageValue.success);\n                        refreshData();\n                        resolve();\n                    }).catch((error) => {\n                        console.log('delete playList error: ', error);\n                        Message.error(messageValue.failed);\n                        resolve();\n                    });\n                });\n            },\n        });\n    };\n\n    const onSavePlayList = (values, errors) => {\n        if (saveSubmitting) {\n            return;\n        }\n        if (errors) {\n            console.log('save errors:', errors);\n            return;\n        }\n        const { intl: { formatMessage } } = props;\n        const messageValue = {\n            success: formatMessage({ id: 'media.base.save.success' }),\n            failed: formatMessage({ id: 'media.base.save.failed' }),\n        };\n        setSaveSubmitting(true);\n        savePlayListInfoApi(values.playListId, values).then(() => {\n            Message.success(messageValue.success);\n            setDialogVisible(false);\n            refreshData();\n        }).catch((error) => {\n            Message.error(messageValue.failed);\n            console.log('save playList error: ', error);\n        }).finally(() => {\n            setSaveSubmitting(false);\n        });\n    };\n\n    const onCloseDialog = () => {\n        setDialogVisible(false);\n    };\n\n    return (\n        <IceContainer>\n            <Loading\n                tip=\"loading...\"\n                visible={isLoading}\n                style={styles.loading}\n            >\n                <CustomToolBar\n                    config={toolBarConfigFun()}\n                    getInstance={(childCp) => {\n                        if (childCp) {\n                            searchField = childCp.getField();\n                        }\n                    }}\n                />\n                <CustomTable\n                    primaryKey='playListId'\n                    columns={columns}\n                    dataSource={playLists}\n                    hasBorder={false}\n                    isZebra\n                    rowSelection={rowSelection}\n                />\n                <Pagination\n                    style={styles.pagination}\n                    type=\"simple\"\n                    current={pageInfo.pageNum}\n                    pageSize={pageInfo.pageSize}\n                    total={pageInfo.total}\n                    onChange={onPageChange}\n                />\n                <PlayListEditDialog\n                    visible={dialogVisible}\n                    submitting={saveSubmitting}\n                    onClose={onCloseDialog}\n                    onSubmit={onSavePlayList}\n                />\n            </Loading>\n        </IceContainer>\n    );\n}\n\n\nconst styles = {\n    pagination: {\n        margin: '20px 0',\n        textAlign: 'center',\n    },\n    loading: {\n        width: '100%',\n    },\n    operationItem: {\n        marginRight: '10px',\n        textDecoration: 'none',\n        color: '#5485F7',\n        cursor: 'pointer',\n    },\n};\n\nexport default injectIntl(PlayListManage);","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\SystemProfileManage\\index.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\SystemProfileManage\\SystemProfileManage.jsx",["487","488","489","490","491","492","493","494","495"],"import React, { useState, useEffect } from 'react';\r\nimport Container from '@icedesign/container';\r\nimport { Form, Field, Input, Select, Grid, Message } from '@alifd/next';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { getSystemProfileApi, saveSystemProfileApi } from '@/api/systemProfileApi';\r\nimport stores from '@/stores/index';\r\n\r\n// const field = new Field({}, { parseName: true });\r\n\r\nconst FormItem = Form.Item;\r\nconst { Row, Col } = Grid;\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        span: 3,\r\n    },\r\n    wrapperCol: {\r\n        span: 10,\r\n    },\r\n};\r\nconst insetLayout = {\r\n    labelCol: { fixedSpan: 3 },\r\n};\r\nconst submitLayout = {\r\n    wrapperCol: {\r\n        offset: 1,\r\n    },\r\n};\r\n\r\nfunction SystemProfileManage(props) {\r\n    const field = Field.useField({ parseName: true });\r\n\r\n    const regionsConfig = stores.useStore('regionsConfig');\r\n    const { regions } = regionsConfig;\r\n    const [regionData, setRegionData] = useState([]);\r\n    const [submitting, setSubmitting] = useState(false);\r\n    const seconds = [\r\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\r\n        31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\r\n        '*',\r\n    ];\r\n    const minutes = [\r\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\r\n        31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\r\n        '*',\r\n    ];\r\n    const hours = [\r\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\r\n        '*',\r\n    ];\r\n    const days = [\r\n        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\r\n        '*',\r\n    ];\r\n\r\n    const { intl: { formatMessage } } = props;\r\n    const messageValue = {\r\n        region: formatMessage({ id: 'media.common.region' }),\r\n        rule: formatMessage({ id: 'media.common.rule' }),\r\n        ruleHelp: formatMessage({ id: 'media.common.rule.help' }),\r\n        second: formatMessage({ id: 'media.common.second' }),\r\n        minute: formatMessage({ id: 'media.common.minute' }),\r\n        hour: formatMessage({ id: 'media.common.hour' }),\r\n        day: formatMessage({ id: 'media.common.day' }),\r\n        success: formatMessage({ id: 'media.base.save.success' }),\r\n        failed: formatMessage({ id: 'media.base.save.failed' }),\r\n    };\r\n\r\n    useEffect(() => {\r\n        const regionData = regions.filter(region => region.value !== 'All');\r\n        setRegionData(regionData);\r\n    }, [regions]);\r\n\r\n    useEffect(() => {\r\n        fetchSystemProfile();\r\n    }, []);\r\n\r\n    const fetchSystemProfile = () => {\r\n        getSystemProfileApi().then((response) => {\r\n            const { data } = response;\r\n            const formData = data.data;\r\n            formData.rules = formData.refreshRule.split(\" \");\r\n            field.setValues(formData);\r\n        }).catch((error) => {\r\n            console.log('fetch system profile error', error);\r\n        });\r\n    };\r\n\r\n    const onSaveSystemProfile = (values, errors) => {\r\n        if (submitting) {\r\n            return;\r\n        }\r\n        if (errors) {\r\n            console.log('save errors:', errors);\r\n            return;\r\n        }\r\n        setSubmitting(true);\r\n        const systemProfile = {\r\n            regionCode: values.regionCode,\r\n            refreshRule: values.rules.join(' '),\r\n        };\r\n        saveSystemProfileApi(values.id, systemProfile).then(() => {\r\n            Message.success(messageValue.success);\r\n        }).catch((error) => {\r\n            Message.error(messageValue.failed);\r\n            console.log('save system profile error: ', error);\r\n        }).finally(() => {\r\n            setSubmitting(false);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <Form\r\n                {...formItemLayout}\r\n                field={field}\r\n            >\r\n                <Input name=\"id\" htmlType=\"hidden\" />\r\n                <FormItem\r\n                    label={messageValue.region}\r\n                    required\r\n                >\r\n                    <Select\r\n                        name=\"regionCode\"\r\n                        dataSource={regionData}\r\n                        showSearch\r\n                        style={styles.select}\r\n                     />\r\n                </FormItem>\r\n\r\n                <FormItem\r\n                    label={messageValue.rule}\r\n                    required\r\n                    help={messageValue.ruleHelp}\r\n                >\r\n                    <Row gutter=\"2\">\r\n                        <Col>\r\n                            <FormItem label={messageValue.second} labelAlign=\"inset\" labelTextAlign=\"left\" {...insetLayout} required requiredTrigger=\"onBlur\" asterisk={false}>\r\n                                <Select\r\n                                    name=\"rules.0\"\r\n                                    style={styles.select}\r\n                                    dataSource={seconds}\r\n                                 />\r\n                            </FormItem>\r\n                        </Col>\r\n                        <Col>\r\n                            <FormItem label={messageValue.minute} labelAlign=\"inset\" labelTextAlign=\"left\" {...insetLayout} required asterisk={false}>\r\n                                <Select\r\n                                    name=\"rules.1\"\r\n                                    style={styles.select}\r\n                                    dataSource={minutes}\r\n                                 />\r\n                            </FormItem>\r\n                        </Col>\r\n                        <Col>\r\n                            <FormItem label={messageValue.hour} labelAlign=\"inset\" labelTextAlign=\"left\" {...insetLayout} required asterisk={false}>\r\n                                <Select\r\n                                    name=\"rules.2\"\r\n                                    style={styles.select}\r\n                                    dataSource={hours}\r\n                                 />\r\n                            </FormItem>\r\n                        </Col>\r\n                        <Col>\r\n                            <FormItem label={messageValue.day} labelAlign=\"inset\" labelTextAlign=\"left\" {...insetLayout} required asterisk={false}>\r\n                                <Select\r\n                                    name=\"rules.3\"\r\n                                    style={styles.select}\r\n                                    dataSource={days}\r\n                                 />\r\n                            </FormItem>\r\n                        </Col>\r\n                    </Row>\r\n                </FormItem>\r\n\r\n                <FormItem {...submitLayout} >\r\n                    <Form.Submit validate type=\"primary\" onClick={onSaveSystemProfile} style={styles.button} loading={submitting}>\r\n                        <FormattedMessage id=\"media.base.submit\" />\r\n                    </Form.Submit>\r\n                </FormItem>\r\n            </Form>\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst styles = {\r\n    select: {\r\n        width: 150,\r\n    },\r\n    button: {\r\n        margin: '0 10px',\r\n    },\r\n};\r\n\r\nexport default injectIntl(SystemProfileManage);","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\TrendingManage\\components\\TrendingVideoManage.jsx",["496","497","498","499","500","501","502","503"],"import React, { useState, useEffect } from 'react';\r\nimport IceContainer from '@icedesign/container';\r\nimport { CustomToolBar } from '@skyworthcloud/component';\r\nimport { Loading, Pagination, Dialog } from '@alifd/next';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport eventProxy from '@/utils/eventProxy';\r\nimport CustomTable from '@/components/CustomTable';\r\nimport { findTrendingVideosApi } from '@/api/trendingApi';\r\n\r\nimport '@/common/common-scss.scss';\r\n\r\nfunction TrendingVideoManage(props) {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [trendingVideos, setTrendingVideos] = useState([]);\r\n    const [type, setType] = useState();\r\n    const [pageInfo, setPageInfo] = useState({pageSize: 5, total: 0});\r\n\r\n    useEffect(() => {\r\n        eventProxy.on('viewTrendingVideo', (type) => {\r\n            setType(type);\r\n            fetchTrendingVideoDataSource(type, pageInfo);\r\n        });\r\n        return () => {\r\n            eventProxy.off('viewTrendingVideo');\r\n        };\r\n    }, []);\r\n\r\n    const columns = [\r\n        {\r\n            title: <FormattedMessage id=\"media.common.title\" />,\r\n            dataIndex: 'title',\r\n            key: 'title',\r\n            width: 250,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.videoId\" />,\r\n            dataIndex: 'videoId',\r\n            key: 'videoId',\r\n            width: 250,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.thumbnail\" />,\r\n            dataIndex: 'thumbnail',\r\n            key: 'thumbnail',\r\n            width: 250,\r\n            render: (value) => {\r\n                if(value) {\r\n                    return <img src={value.url} style={styles.img} alt=\"thumbnail\" />;\r\n                }\r\n                return null;\r\n            },\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.owner\" />,\r\n            dataIndex: 'owner',\r\n            key: 'owner',\r\n            width: 250,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.description\" />,\r\n            dataIndex: 'description',\r\n            key: 'description',\r\n            width: 650,\r\n            render: (value, index, record) => {\r\n                return (\r\n                    <div className=\"tags-description\">\r\n                        <span title={record.description}>{record.description}</span>\r\n                    </div>\r\n                );\r\n            },\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.duration\" />,\r\n            dataIndex: 'duration',\r\n            key: 'duration',\r\n            width: 150,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.viewCount\" />,\r\n            dataIndex: 'viewCount',\r\n            key: 'viewCount',\r\n            width: 150,\r\n        },\r\n    ];\r\n\r\n    const toolBarConfigFun = () => {\r\n        // const { intl: { formatMessage }, } = props;\r\n        // const messageValue = {\r\n        //     titlePlaceholder: formatMessage({ id: 'media.channel.title.placeholder' }),\r\n        // }\r\n        return [\r\n            // {\r\n            //     label: <FormattedMessage id=\"media.channel.title\" />,\r\n            //     key: 'title',\r\n            //     component: 'Input',\r\n            //     field: 'title',\r\n            //     componentProps: {\r\n            //         placeholder: messageValue.titlePlaceholder,\r\n            //     }\r\n            // },\r\n            // {\r\n            //     label: <FormattedMessage id=\"media.base.search\" />,\r\n            //     key: 'search',\r\n            //     component: 'Button',\r\n            //     componentProps: {\r\n            //         onClick: () => onSearchChannel(),\r\n            //     }\r\n            // },\r\n            // {\r\n            //     label: '即刻采集',\r\n            //     key: 'collect',\r\n            //     component: 'Button',\r\n            //     componentProps: {\r\n            //         disabled: selectKeys.length === 0,\r\n            //         onClick: () => onCollect(),\r\n            //     }\r\n            // },\r\n            // {\r\n            //     label: <FormattedMessage id=\"media.base.add\" />,\r\n            //     key: 'addChannel',\r\n            //     component: 'Button',\r\n            //     componentProps: {\r\n            //         onClick: () => onAddChannel(),\r\n            //     }\r\n            // },\r\n        ];\r\n    };\r\n\r\n    const fetchTrendingVideoDataSource = (type, params) => {\r\n        setIsLoading(true);\r\n        findTrendingVideosApi(type, params).then((response) => {\r\n            const { data } = response;\r\n            setTrendingVideos(data.data.items);\r\n            setPageInfo(data.data.pageInfo);\r\n        }).catch((error) => {\r\n            console.log('error: ', error);\r\n        }).finally(() => {\r\n            setIsLoading(false);\r\n        });\r\n    };\r\n\r\n    const onPageChange = (pageNum) => {\r\n        setPageInfo({...pageInfo, pageNum});\r\n        fetchTrendingVideoDataSource(type, {...pageInfo, pageNum});\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            visible={props.visible}\r\n            footer={false}\r\n            isFullScreen\r\n            style={styles.dialog}\r\n            onClose={props.onClose}\r\n        >\r\n            <IceContainer>\r\n            <Loading\r\n                tip=\"loading...\"\r\n                visible={isLoading}\r\n                style={styles.loading}\r\n            >\r\n                <CustomToolBar\r\n                    config={toolBarConfigFun()}\r\n                />\r\n                <CustomTable\r\n                    columns={columns}\r\n                    dataSource={trendingVideos}\r\n                    hasBorder={false}\r\n                    isZebra\r\n                />\r\n                <Pagination\r\n                    style={styles.pagination}\r\n                    type=\"simple\"\r\n                    pageSize={pageInfo.pageSize}\r\n                    total={pageInfo.total}\r\n                    onChange={onPageChange}\r\n                />\r\n            </Loading>\r\n        </IceContainer>\r\n        </Dialog>\r\n        \r\n    );\r\n}\r\n\r\nconst styles = {\r\n    dialog: {\r\n        width: 1500,\r\n    },\r\n    pagination: {\r\n        margin: '20px 0',\r\n        textAlign: 'center',\r\n    },\r\n    loading: {\r\n        width: '100%',\r\n    },\r\n    operationItem: {\r\n        marginRight: '10px',\r\n        textDecoration: 'none',\r\n        color: '#5485F7',\r\n        cursor: 'pointer',\r\n    },\r\n    img: {\r\n        height: 80,\r\n    },\r\n};\r\n\r\nexport default injectIntl(TrendingVideoManage);","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\TrendingManage\\index.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\TrendingManage\\TrendingManage.jsx",["504","505","506","507","508","509","510"],"import React, { useState, useEffect } from 'react';\r\nimport IceContainer from '@icedesign/container';\r\nimport { CustomToolBar } from '@skyworthcloud/component';\r\nimport { Loading, Message } from '@alifd/next';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport CustomTable from '@/components/CustomTable';\r\nimport eventProxy from '@/utils/eventProxy';\r\nimport stores from '@/stores/index';\r\nimport { findTrendingTypesApi } from '@/api/trendingApi';\r\nimport TrendingVideoManage from './components/TrendingVideoManage';\r\nimport { refreshPageVideo } from '@/api/commonApi';\r\n\r\nfunction TrendingManage(props) {\r\n    const commonConfig = stores.useStore('commonConfig');\r\n    const { serverUri, operatorId } = commonConfig;\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [dialogVisible, setDialogVisible] = useState(false);\r\n    const [trendingTypes, setTrendingTypes] = useState([]);\r\n\r\n    useEffect(() => {\r\n        refreshData();\r\n    }, []);\r\n\r\n    const columns = [\r\n        {\r\n            title: <FormattedMessage id=\"media.common.type\" />,\r\n            dataIndex: 'type',\r\n            key: 'type',\r\n            width: 250,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.common.item\" />,\r\n            dataIndex: 'num',\r\n            key: 'num',\r\n            width: 250,\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"media.base.operation\" />,\r\n            key: 'operation',\r\n            width: 150,\r\n            render: (value, index, record) => {\r\n                const copyUrl = `${serverUri}/api/v1/dataSource?based=${based}&operatorId=${operatorId}&category=trending&type=${encodeURIComponent(record.type)}`;\r\n                return (\r\n                    <div>\r\n                        <a\r\n                            style={styles.operationItem}\r\n                        onClick={() => onViewTrendingVideo(record)}\r\n                        >\r\n                            <FormattedMessage id=\"media.common.view\" />\r\n                        </a>\r\n                        <a\r\n                            style={styles.operationItem}\r\n                            className=\"clipBtn\"\r\n                            data-clipboard-text={copyUrl}\r\n                        >\r\n                            <FormattedMessage id=\"media.common.copyUrl\" />\r\n                        </a>\r\n                    </div>\r\n                );\r\n            },\r\n        },\r\n    ];\r\n\r\n    const toolBarConfigFun = () => {\r\n        const { intl: { formatMessage } } = props;\r\n        const messageValue = {\r\n            refresh: formatMessage({ id: 'media.common.refresh' }),\r\n        };\r\n        return [\r\n            {\r\n                label: messageValue.refresh,\r\n                key: 'refresh',\r\n                component: 'Button',\r\n                componentProps: {\r\n                    onClick: () => onRefreshPageVideo(),\r\n                },\r\n            },\r\n        ];\r\n    };\r\n\r\n    const fetchTrendingTypeDataSource = (params) => {\r\n        setIsLoading(true);\r\n        findTrendingTypesApi(params).then((response) => {\r\n            const { data } = response;\r\n            setTrendingTypes(data.data.items);\r\n        }).catch((error) => {\r\n            console.log('error: ', error);\r\n        }).finally(() => {\r\n            setIsLoading(false);\r\n        });\r\n    };\r\n\r\n    const refreshData = () => {\r\n        fetchTrendingTypeDataSource();\r\n    };\r\n\r\n    const onViewTrendingVideo = (trending) => {\r\n        setDialogVisible(true);\r\n        eventProxy.trigger('viewTrendingVideo', trending.type);\r\n    };\r\n\r\n    const onCloseDialog = () => {\r\n        setDialogVisible(false);\r\n    };\r\n\r\n    const onRefreshPageVideo = () => {\r\n        refreshPageVideo(\"Trending\", {}).then(() => {\r\n            Message.success('Refresh task submit successfully');\r\n            refreshData();\r\n        }).catch((error) => {\r\n            console.log('refresh page video error', error);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <IceContainer>\r\n            <Loading\r\n                tip=\"loading...\"\r\n                visible={isLoading}\r\n                style={styles.loading}\r\n            >\r\n                <CustomToolBar\r\n                    config={toolBarConfigFun()}\r\n                />\r\n                <CustomTable\r\n                    columns={columns}\r\n                    dataSource={trendingTypes}\r\n                    hasBorder={false}\r\n                    isZebra\r\n                />\r\n                <TrendingVideoManage\r\n                    visible={dialogVisible}\r\n                    onClose={onCloseDialog}\r\n                />\r\n            </Loading>\r\n        </IceContainer>\r\n    );\r\n}\r\n\r\nconst styles = {\r\n    pagination: {\r\n        margin: '20px 0',\r\n        textAlign: 'center',\r\n    },\r\n    loading: {\r\n        width: '100%',\r\n    },\r\n    operationItem: {\r\n        marginRight: '10px',\r\n        textDecoration: 'none',\r\n        color: '#5485F7',\r\n        cursor: 'pointer',\r\n    },\r\n};\r\n\r\nexport default injectIntl(TrendingManage);","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\VideoManage\\components\\PosterManageDialog.jsx",["511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529"],"import React, { useState } from 'react';\r\nimport { Upload, Dialog, Balloon, Button, Message } from '@alifd/next';\r\nimport IcePanel from '@icedesign/panel';\r\nimport { injectIntl } from 'react-intl';\r\nimport '@/common/common-scss.scss';\r\nimport { deletePosterApi, updateDefaultPosterApi } from '@/api/commonApi';\r\n\r\nfunction PosterManageDialog(props) {\r\n    const { video } = props;\r\n    const [dialogVisible, setVisible] = useState(false);\r\n    const [posters, setPosters] = useState([]);\r\n    const [defaultPoster, setDefaultPoster] = useState();\r\n    const [bigPosters, setBigPosters] = useState([]);\r\n    const [defaultBigPoster, setDefaultBigPoster] = useState();\r\n    const [emptyPoster, setEmptyPoster] = useState([]);\r\n\r\n    const { intl: { formatMessage } } = props;\r\n    const messageValue = {\r\n        poster: formatMessage({ id: 'media.video.poster' }),\r\n        posterManage: formatMessage({ id: 'media.video.poster.manage' }),\r\n        posters: formatMessage({ id: 'media.video.poster.posters' }),\r\n        defaultPoster: formatMessage({ id: 'media.video.poster.defaultPoster' }),\r\n        bigPosters: formatMessage({ id: 'media.video.poster.bigPosters' }),\r\n        defaultBigPoster: formatMessage({ id: 'media.video.poster.defaultBigPoster' }),\r\n        upload: formatMessage({ id: 'media.base.upload' }),\r\n        setDefault: formatMessage({ id: 'media.base.setDefualt' }),\r\n        setDefaultSuccess: formatMessage({ id: 'media.base.setDefualt.success' }),\r\n        setDefaultFailed: formatMessage({ id: 'media.base.setDefualt.failed' }),\r\n        delete: formatMessage({ id: 'media.base.delete' }),\r\n        delSuccess: formatMessage({ id: 'media.base.delete.success' }),\r\n        delFailed: formatMessage({ id: 'media.base.delete.failed' }),\r\n        uploadSuccess: formatMessage({ id: 'media.base.upload.success' }),\r\n        uploadFailed: formatMessage({ id: 'media.base.upload.failed' }),\r\n        delDefaultFailed: formatMessage({ id: 'media.video.poster.default.delete.failed' }),\r\n    };\r\n\r\n    const onOpen = (video) => {\r\n        setDefaultPoster(video.defaultPoster);\r\n        const posters = video.posters.map((poster, index) => {\r\n            return {\r\n                index,\r\n                pictureId: poster.pictureId,\r\n                name: buildImgName(poster),\r\n                state: 'done',\r\n                url: poster.url,\r\n            };\r\n        });\r\n        setPosters(posters);\r\n        const bigPosters = video.bigPosters.map((bigPoster, index) => {\r\n            return {\r\n                index,\r\n                pictureId: bigPoster.pictureId,\r\n                name: buildImgName(bigPoster),\r\n                state: 'done',\r\n                url: bigPoster.url,\r\n            };\r\n        });\r\n        setDefaultBigPoster(video.defaultBigPoster);\r\n        setBigPosters(bigPosters);\r\n        setVisible(true);\r\n    };\r\n\r\n    const buildImgName = (poster) => {\r\n        const pointIndex = poster.url.lastIndexOf(\".\");\r\n        const lastIndex = poster.url.lastIndexOf(\"?\");\r\n        let suffix;\r\n        if (lastIndex !== -1) {\r\n            suffix = poster.url.substring(pointIndex, lastIndex);\r\n        } else {\r\n            suffix = poster.url.substring(pointIndex);\r\n        }\r\n        return `${poster.width  } * ${  poster.height  }${suffix}`;\r\n    };\r\n\r\n    const onClose = () => {\r\n        setVisible(false);\r\n    };\r\n\r\n    const beforeUpload = () => {\r\n        // console.log('beforeUpload: ', file, options)\r\n    };\r\n\r\n    const onSuccess = (info, type) => {\r\n        Message.success(messageValue.uploadSuccess);\r\n        const newPosters = type === 'posters' ? posters : bigPosters;\r\n        const data = info.response.poster;\r\n        const poster = {\r\n            name: buildImgName(data),\r\n            pictureId: data.pictureId,\r\n            state: 'done',\r\n            index: newPosters.length,\r\n            url: info.imgURL,\r\n        };\r\n        video[type].push(data);\r\n        newPosters.push(poster);\r\n        if (type === 'posters') {\r\n            setPosters([...newPosters]);\r\n        } else {\r\n            setBigPosters([...newPosters]);\r\n        }\r\n    };\r\n\r\n    const onRemove = () => {\r\n        \r\n    };\r\n\r\n    const onError = (info) => {\r\n        console.log('onError', info);\r\n        Message.error(messageValue.uploadFailed);\r\n        setEmptyPoster([]);\r\n    };\r\n\r\n    const formatter = (res) => {\r\n        // 函数里面根据当前服务器返回的响应数据\r\n        // 重新拼装符合组件要求的数据格式\r\n        return {\r\n            success: res.status === 200,\r\n            url: res.data.url,\r\n            poster: res.data,\r\n        };\r\n    };\r\n\r\n    const onPosterSuccess = (info) => {\r\n        onSuccess(info, 'posters');\r\n    };\r\n\r\n    const onPosterRemove = (info) => {\r\n        return onRemove(info, 'posters');\r\n    };\r\n\r\n    const onBigPosterSuccess = (info) => {\r\n        onSuccess(info, 'bigPosters');\r\n    };\r\n\r\n    const onBigPosterRemove = (info) => {\r\n        return onRemove(info, 'bigPosters');\r\n    };\r\n\r\n    const onShowDefaultPoster = (defaultPoster) => {\r\n        if (defaultPoster) {\r\n            const imgHtml = (<img className=\"poster-img\" src={defaultPoster.url} alt=\"\" />);\r\n            return (<div className=\"poster-items-div\">\r\n                <Balloon trigger={imgHtml} align=\"t\" closable={false} needAdjust shouldUpdatePosition triggerType=\"hover\" >\r\n                    <img className=\"poster-ballon-img\" src={defaultPoster.url} alt=\"\" />\r\n                </Balloon>\r\n                <span>{buildImgName(defaultPoster)}</span>\r\n            </div>);\r\n        }\r\n        return null;\r\n    };\r\n\r\n    const onShowPoster = (posters, type) => {\r\n        if (posters) {\r\n            const posterHtml = (posters.map((poster, index) => {\r\n                const imgHtml = (<img key={index} className=\"poster-img\" src={poster.url} alt=\"\" />);\r\n                return (<div key={index} className=\"poster-items-div\">\r\n                    <Balloon trigger={imgHtml} align=\"t\" closable={false} needAdjust shouldUpdatePosition triggerType=\"hover\" >\r\n                        <img key={index} className=\"poster-ballon-img\" src={poster.url} alt=\"\" />\r\n                    </Balloon>\r\n                    <span>{poster.name}</span>\r\n                    <div className=\"poster-button-div\">\r\n                        <Button size=\"small\" className=\"poster-button\" disabled={poster.pictureId === (type === \"posters\" ? defaultPoster.pictureId : defaultBigPoster.pictureId)} onClick={() => onSetDefaultPoster(poster, type)}>{messageValue.setDefault}</Button>\r\n                        <Button size=\"small\" className=\"poster-button\" onClick={() => onRemovePoster(poster, type)}>{messageValue.delete}</Button>\r\n                    </div>\r\n                </div>);\r\n            }));\r\n            return (<div className=\"poster-outside-div\">\r\n                {posterHtml}\r\n            </div>);\r\n        }\r\n        return null;\r\n    };\r\n\r\n    const onRemovePoster = (poster, type) => {\r\n        const data = {\r\n            category: 'video',\r\n            type,\r\n            url: poster.url,\r\n            pictureId: poster.pictureId,\r\n        };\r\n        deletePosterApi(video.videoId, data).then(() => {\r\n            let newPosters = type === 'posters' ? posters : bigPosters;\r\n            video[type].splice(poster.index, 1);\r\n            newPosters.splice(poster.index, 1);\r\n            newPosters = newPosters.map((poster, index) => {\r\n                return {\r\n                    index,\r\n                    name: poster.name,\r\n                    state: 'done',\r\n                    url: poster.url,\r\n                    pictureId: poster.pictureId,\r\n                };\r\n            });\r\n            if (type === 'posters') {\r\n                setPosters([...newPosters]);\r\n            } else {\r\n                setBigPosters([...newPosters]);\r\n            }\r\n            Message.success(messageValue.delSuccess);\r\n            return true;\r\n        }).catch((error) => {\r\n            const { data } = error;\r\n            if (data.status === 50001) {\r\n                Message.error(messageValue.delDefaultFailed);\r\n            } else {\r\n                Message.error(messageValue.delFailed);\r\n            }\r\n            console.log(`remove ${  type  } error.`, error);\r\n            return false;\r\n        });\r\n    };\r\n\r\n    const onSetDefaultPoster = (defaultPoster, type) => {\r\n        const currentDefault = video[type][defaultPoster.index];\r\n        const updateData = {\r\n            category: 'video',\r\n            type,\r\n            pictureId: currentDefault.pictureId,\r\n        };\r\n        updateDefaultPosterApi(video.videoId, updateData).then((response) => {\r\n            const { data } = response;\r\n            console.log('data', data);\r\n            if (type === 'posters') {\r\n                setDefaultPoster(data.data);\r\n                video.defaultPoster = data.data;\r\n            } else {\r\n                setDefaultBigPoster(data.data);\r\n                video.defaultBigPoster = data.data;\r\n            }\r\n            Message.success(messageValue.setDefaultSuccess);\r\n            return true;\r\n        }).catch((error) => {\r\n            Message.error(messageValue.setDefaultFailed);\r\n            console.log('set default poster error', error);\r\n            return false;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div style={styles.posterManage}>\r\n            <a\r\n                style={styles.operationItem}\r\n                onClick={() => onOpen(video)}\r\n            >\r\n                {messageValue.poster}\r\n            </a>\r\n            <Dialog\r\n                title={messageValue.posterManage}\r\n                visible={dialogVisible}\r\n                isFullScreen\r\n                footer={false}\r\n                style={styles.dialog}\r\n                onClose={onClose}\r\n            >\r\n                <div>\r\n                    <IcePanel style={styles.pannel}>\r\n                        <IcePanel.Header>\r\n                            {messageValue.defaultPoster}\r\n                        </IcePanel.Header>\r\n                        <IcePanel.Body>\r\n                            {onShowDefaultPoster(defaultPoster)}\r\n                        </IcePanel.Body>\r\n                    </IcePanel>\r\n                    <IcePanel style={styles.pannel}>\r\n                        <IcePanel.Header>\r\n                            {messageValue.posters}\r\n                        </IcePanel.Header>\r\n                        <IcePanel.Body>\r\n                            <div>\r\n                                {onShowPoster(posters, 'posters')}\r\n                            </div>\r\n                            <Upload.Card\r\n                                listType=\"card\"\r\n                                // eslint-disable-next-line no-undef\r\n                                action={`/youtube-media/api/v1/posters`}\r\n                                accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\r\n                                data={{ resourceId: video.videoId, category: 'video', type: 'posters' }}\r\n                                beforeUpload={beforeUpload}\r\n                                onSuccess={onPosterSuccess}\r\n                                onError={onError}\r\n                                onRemove={onPosterRemove}\r\n                                formatter={formatter}\r\n                                value={emptyPoster}\r\n                            >\r\n                                <span>{messageValue.upload}</span>\r\n                            </Upload.Card>\r\n                        </IcePanel.Body>\r\n                    </IcePanel>\r\n                    <IcePanel style={styles.pannel}>\r\n                        <IcePanel.Header>\r\n                            {messageValue.setDefaultBigPoster}\r\n                        </IcePanel.Header>\r\n                        <IcePanel.Body>\r\n                            {onShowDefaultPoster(defaultBigPoster)}\r\n                        </IcePanel.Body>\r\n                    </IcePanel>\r\n                    <IcePanel style={styles.pannel}>\r\n                        <IcePanel.Header>\r\n                            {messageValue.bigPosters}\r\n                        </IcePanel.Header>\r\n                        <IcePanel.Body>\r\n                            <div>\r\n                                {onShowPoster(bigPosters, 'bigPosters')}\r\n                            </div>\r\n                            <Upload.Card\r\n                                listType=\"card\"\r\n                                // eslint-disable-next-line no-undef\r\n                                action={`/youtube-media/api/v1/posters`}\r\n                                accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\r\n                                data={{ resourceId: video.videoId, category: 'video', type: 'bigPosters' }}\r\n                                beforeUpload={beforeUpload}\r\n                                onSuccess={onBigPosterSuccess}\r\n                                onError={onError}\r\n                                onRemove={onBigPosterRemove}\r\n                                formatter={formatter}\r\n                                value={emptyPoster}\r\n                            >\r\n                                <span>{messageValue.upload}</span>\r\n                            </Upload.Card>\r\n                        </IcePanel.Body>\r\n                    </IcePanel>\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst styles = {\r\n    loading: {\r\n        width: '100%',\r\n    },\r\n    posterManage: {\r\n        display: 'inline-block',\r\n    },\r\n    dialog: {\r\n        width: 1000,\r\n    },\r\n    operationItem: {\r\n        marginRight: '10px',\r\n        textDecoration: 'none',\r\n        color: '#5485F7',\r\n        cursor: 'pointer',\r\n    },\r\n    pannel: {\r\n        margin: '10px 0px',\r\n    },\r\n};\r\n\r\nexport default injectIntl(PosterManageDialog);","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\VideoManage\\components\\VideoEditDialog.jsx",["530","531","532","533","534"],"import React, { useEffect } from 'react';\r\nimport { Dialog, Form, Field, Input, Button, Tag } from '@alifd/next';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport eventProxy from '@/utils/eventProxy';\r\n\r\nconst FormItem = Form.Item;\r\nconst { Group: TagGroup, Closeable: CloseableTag } = Tag;\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        span: 4,\r\n    },\r\n    wrapperCol: {\r\n        span: 16,\r\n    },\r\n};\r\n\r\nconst submitLayout = {\r\n    wrapperCol: {\r\n        offset: 9,\r\n    },\r\n};\r\n\r\nexport default injectIntl(function VideoEditDialog(props) {\r\n    const field = Field.useField();\r\n    const { init } = field;\r\n\r\n    useEffect(() => {\r\n        eventProxy.on('editVideo', (video) => {\r\n            field.setValue('videoId', video.videoId);\r\n            field.setValue('title', video.title);\r\n            field.setValue('tags', video.tags ? video.tags : []);\r\n            field.setValue('description', video.description);\r\n        });\r\n\r\n        return () => {\r\n            eventProxy.off('editVideo');\r\n        };\r\n    });\r\n\r\n    const { intl: { formatMessage } } = props;\r\n    const messageValue = {\r\n        editVideo: formatMessage({ id: 'media.video.edit' }),\r\n        title: formatMessage({ id: 'media.video.title' }),\r\n        titleRequired: formatMessage({ id: 'media.video.title.required' }),\r\n        titlePlaceholder: formatMessage({ id: 'media.video.title.placeholder' }),\r\n        tags: formatMessage({ id: 'media.video.tags' }),\r\n        tagsPlaceholder: formatMessage({ id: 'media.video.tags.placeholder' }),\r\n        tagsEnter: formatMessage({ id: 'media.video.tags.enter' }),\r\n        description: formatMessage({ id: 'media.video.description' }),\r\n        descriptionPlaceholder: formatMessage({ id: 'media.video.description.placeholder' }),\r\n    };\r\n\r\n    const renderTags = () => {\r\n        let tagsContent;\r\n        if (field.getValue('tags')) {\r\n            tagsContent = field.getValue('tags').map((tag, index) => {\r\n                return <CloseableTag key={index} onClose={() => removeTag(tag)} >{tag}</CloseableTag>;\r\n            });\r\n        }\r\n        const tagGroup = (\r\n            <div>\r\n                <TagGroup >\r\n                    {tagsContent}\r\n                </TagGroup>\r\n                <Input {...init(\"inputTag\")} onPressEnter={() => addTag()} hasLimitHint maxLength={50} placeholder={messageValue.tagsPlaceholder} addonTextAfter={messageValue.tagsEnter} />\r\n            </div>\r\n        );\r\n        return tagGroup;\r\n    };\r\n\r\n    const removeTag = tag => {\r\n        const newTags = field.getValue('tags');\r\n        newTags.splice(newTags.indexOf(tag), 1);\r\n        field.setValue('tags', newTags);\r\n        return true;\r\n    };\r\n\r\n    const addTag = () => {\r\n        const newTag = field.getValue('inputTag');\r\n        if (!newTag || !newTag.trim()) {\r\n            console.log('newTag must be not null');\r\n            field.setValue('inputTag');\r\n            return;\r\n        }\r\n        let newTags = [];\r\n        if (field.getValue('tags')) {\r\n            newTags = field.getValue('tags');\r\n        }\r\n        newTags.push(newTag.trim());\r\n        newTags = [...new Set(newTags)];\r\n        field.setValue('tags', newTags);\r\n        field.setValue('inputTag', undefined);\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            title={messageValue.editVideo}\r\n            visible={props.visible}\r\n            isFullScreen\r\n            footer={false}\r\n            style={styles.dialog}\r\n            onClose={props.onClose}\r\n        >\r\n            <Form\r\n                {...formItemLayout}\r\n                field={field}\r\n            >\r\n                <Input name=\"videoId\" htmlType=\"hidden\" />\r\n                <FormItem\r\n                    label={messageValue.title}\r\n                    required\r\n                    requiredTrigger=\"onBlur\"\r\n                    requiredMessage={messageValue.titleRequired}\r\n                    hasFeedback\r\n                >\r\n                    <Input name=\"title\" placeholder={messageValue.titlePlaceholder} />\r\n                </FormItem>\r\n\r\n                <FormItem\r\n                    label={messageValue.tags}\r\n                >\r\n                    {renderTags}\r\n                </FormItem>\r\n\r\n                <FormItem\r\n                    label={messageValue.description}\r\n                >\r\n                    <Input.TextArea name=\"description\" autoHeight={{ minRows: 2, maxRows: 10 }} placeholder={messageValue.descriptionPlaceholder} />\r\n                </FormItem>\r\n\r\n                <FormItem {...submitLayout} >\r\n                    <Form.Submit validate type=\"primary\" onClick={props.onSubmit} style={styles.button} loading={props.submitting}>\r\n                        <FormattedMessage id=\"media.base.submit\" />\r\n                    </Form.Submit>\r\n                    <Button type=\"primary\" onClick={props.onClose} style={styles.button}>\r\n                        <FormattedMessage id=\"media.base.cancel\" />\r\n                    </Button>\r\n                </FormItem>\r\n            </Form>\r\n        </Dialog>\r\n    );\r\n});\r\n\r\nconst styles = {\r\n    dialog: {\r\n        width: 800,\r\n    },\r\n    button: {\r\n        margin: '0 10px',\r\n    },\r\n};","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\VideoManage\\index.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\pages\\VideoManage\\VideoManage.jsx",["535","536","537","538","539","540","541","542","543","544","545","546","547","548"],"import React, { useState, useEffect } from 'react';\nimport { Loading, Pagination, Dialog, Message } from '@alifd/next';\nimport { CustomToolBar } from '@skyworthcloud/component';\nimport IceContainer from '@icedesign/container/lib/IceContainer';\nimport clonedeep from 'lodash.clonedeep';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport stores from '@/stores/index';\nimport CustomTable from '@/components/CustomTable';\nimport { findChannelsApi } from '@/api/channelApi';\nimport { findVideosApi, saveVideoInfoApi, deleteVideoInfoApi } from '@/api/videoApi';\nimport VideoEditDialog from './components/VideoEditDialog';\nimport eventProxy from '@/utils/eventProxy';\nimport PosterManageDialog from './components/PosterManageDialog';\nimport '@/common/common-scss.scss';\nimport { findPlayListsApi } from '@/api/playListApi';\n\nfunction VideoManage(props) {\n\n    let searchField = null;\n\n    const regionsConfig = stores.useStore('regionsConfig');\n    const { regions } = regionsConfig;\n    const [isLoading, setIsLoading] = useState(false);\n    const [dialogVisible, setDialogVisible] = useState(false);\n    const [saveSubmitting, setSaveSubmitting] = useState(false);\n    const [searchParams, setSearchParams] = useState({});\n    const [channels, setChannels] = useState([]);\n    const [playLists, setPlayLists] = useState([]);\n    const [videos, setVideos] = useState([]);\n    const [selectChannel, setSelectChannel] = useState();\n    const [pageInfo, setPageInfo] = useState({ pageSize: 7, total: 0 });\n\n    useEffect(() => {\n        fetchChannelData();\n    }, []);\n\n    useEffect(() => {\n        if (selectChannel) {\n            fetchPlayListData();\n        }\n    }, [selectChannel]);\n\n    useEffect(() => {\n        if (searchParams.channelId) {\n            const params = {\n                ...searchParams,\n                ...pageInfo,\n                pageNum: 1,\n            };\n            fetchVideoData(params);\n        }\n    }, [searchParams]);\n\n    const columns = [\n        {\n            title: <FormattedMessage id=\"media.video.title\" />,\n            dataIndex: 'title',\n            key: 'title',\n            lock: 'left',\n            width: 250,\n        },\n        {\n            title: <FormattedMessage id=\"media.video.videoId\" />,\n            dataIndex: 'videoId',\n            key: 'videoId',\n            width: 250,\n        },\n        {\n            title: <FormattedMessage id=\"media.video.channel\" />,\n            dataIndex: 'channelId',\n            key: 'channelId',\n            width: 250,\n            render: (value, index, record) => {\n                const channel = channels.find(item => item.value === record.channelId);\n                return (\n                    <span>{channel ? channel.label : record.channelId}</span>\n                );\n            },\n        },\n        {\n            title: <FormattedMessage id=\"media.video.view\" />,\n            dataIndex: 'viewCount',\n            key: 'viewCount',\n            width: 150,\n        },\n        {\n            title: <FormattedMessage id=\"media.video.like\" />,\n            dataIndex: 'likeCount',\n            key: 'likeCount',\n            width: 150,\n        },\n        {\n            title: <FormattedMessage id=\"media.video.dislike\" />,\n            dataIndex: 'dislikeCount',\n            key: 'dislikeCount',\n            width: 150,\n        },\n        {\n            title: <FormattedMessage id=\"media.video.tags\" />,\n            dataIndex: 'tags',\n            key: 'tags',\n            width: 250,\n            render: (value, index, record) => {\n                let tags;\n                if (record.tags && record.tags.length > 0) {\n                    tags = `[ \"${  record.tags.join('\", \"')  }\" ]`;\n                } else {\n                    tags = '[]';\n                }\n                return (\n                    <div className=\"tags-description\">\n                        <span title={tags}>{tags}</span>\n                    </div>\n                );\n            },\n        },\n        {\n            title: <FormattedMessage id=\"media.video.description\" />,\n            dataIndex: 'description',\n            key: 'description',\n            width: 850,\n            render: (value, index, record) => {\n                return (\n                    <div className=\"tags-description\">\n                        <span title={record.description}>{record.description}</span>\n                    </div>\n                );\n            },\n        },\n        {\n            title: <FormattedMessage id=\"media.video.duration\" />,\n            dataIndex: 'duration',\n            key: 'duration',\n            width: 150,\n        },\n        {\n            title: <FormattedMessage id=\"media.video.regions\" />,\n            dataIndex: 'allowed',\n            key: 'allowed',\n            width: 250,\n            render: (value, index, record) => {\n                let allowed;\n                if (record.allowed) {\n                    allowed = record.allowed.map(regionCode => {\n                        const region = regions.find(item => regionCode === item.value);\n                        return region ? region.label : regionCode;\n                    });\n                    allowed = `[ \"${  allowed.join('\", \"')  }\" ]`;\n                } else {\n                    allowed = '[ \"All\" ]';\n                }\n                return (\n                    <div className=\"video-tags-description\">\n                        <span title={allowed}>{allowed}</span>\n                    </div>\n                );\n            },\n        },\n        {\n            title: <FormattedMessage id=\"media.base.operation\" />,\n            key: 'operation',\n            width: 200,\n            lock: 'right',\n            render: (value, index, record) => {\n                return (\n                    <div>\n                        <a\n                            style={styles.operationItem}\n                            onClick={() => onEditVideo(record)}\n                        >\n                            <FormattedMessage id=\"media.base.edit\" />\n                        </a>\n                        <PosterManageDialog\n                            video={record}\n                        />\n                        <a\n                            style={styles.operationItem}\n                            onClick={() => onDeleteVideo(record)}\n                        >\n                            <FormattedMessage id=\"media.base.delete\" />\n                        </a>\n                    </div>\n                );\n            },\n        },\n    ];\n\n    const toolBarConfigFun = () => {\n        const { intl: { formatMessage } } = props;\n        const messageValue = {\n            titlePlaceholder: formatMessage({ id: 'media.video.title.placeholder' }),\n            tagsPlaceholder: formatMessage({ id: 'media.video.tags.placeholder' }),\n        };\n        return [\n            {\n                label: <FormattedMessage id=\"media.video.channel\" />,\n                key: 'channelId',\n                component: 'Select',\n                field: 'channelId',\n                componentProps: {\n                    dataSource: channels,\n                    onChange: (value) => {\n                        setSelectChannel(value);\n                    },\n                    style: {\n                        width: 150,\n                    },\n                },\n            },\n            {\n                label: <FormattedMessage id=\"media.video.playList\" />,\n                key: 'playList',\n                component: 'Select',\n                field: 'playListId',\n                defaultValue: 'All',\n                componentProps: {\n                    dataSource: playLists,\n                    cacheValue: false,\n                    showSearch: true,\n                    style: {\n                        width: 200,\n                    },\n                },\n            },\n            {\n                label: <FormattedMessage id=\"media.video.title\" />,\n                key: 'title',\n                component: 'Input',\n                field: 'title',\n                componentProps: {\n                    placeholder: messageValue.titlePlaceholder,\n                },\n            },\n            {\n                label: <FormattedMessage id=\"media.video.tags\" />,\n                key: 'tag',\n                component: 'Input',\n                field: 'tag',\n                componentProps: {\n                    placeholder: messageValue.tagsPlaceholder,\n                },\n            },\n            {\n                label: <FormattedMessage id=\"media.base.search\" />,\n                key: 'search',\n                component: 'Button',\n                componentProps: {\n                    onClick: () => onSearchVideo(),\n                },\n            },\n        ];\n    };\n\n    const fetchChannelData = () => {\n        const params = {\n            pageSize: 100,\n        };\n        setIsLoading(true);\n        findChannelsApi(params).then((response) => {\n            const { data } = response;\n            const channels = data.data.items.map((channel) => {\n                return {\n                    label: channel.title,\n                    value: channel.channelId,\n                };\n            });\n            setChannels(channels);\n            if (channels.length > 0) {\n                const channelId = channels[0].value;\n                searchField.setValue('channelId', channelId);\n                setSearchParams({ ...searchParams, channelId });\n                setSelectChannel(channelId);\n            }\n        }).catch((error) => {\n            console.log('fetch channel data error: ', error);\n        }).finally(() => {\n            setIsLoading(false);\n        });\n    };\n\n    const fetchPlayListData = () => {\n        const params = {\n            channelId: selectChannel,\n            pageSize: 100,\n        };\n        let playListData;\n        findPlayListsApi(params).then((response) => {\n            const { data } = response;\n            playListData = data.data.items.map((playList) => {\n                return {\n                    label: playList.title,\n                    value: playList.playListId,\n                };\n            });\n        }).catch((error) => {\n            console.log('fetch playList data error: ', error);\n        }).finally(() => {\n            playListData.unshift({\n                label: 'All',\n                value: 'All',\n            });\n            setPlayLists(playListData);\n            searchField.setValue('playListId', \"All\");\n        });\n    };\n\n    const fetchVideoData = (params) => {\n        setIsLoading(true);\n        findVideosApi(params).then((response) => {\n            const { data } = response;\n            setVideos(data.data.items);\n            setPageInfo(data.data.pageInfo);\n        }).catch((error) => {\n            console.log('fetch video data error: ', error);\n            setVideos([]);\n        }).finally(() => {\n            setIsLoading(false);\n        });\n    };\n\n    const refreshData = () => {\n        const params = {\n            ...searchParams,\n            ...pageInfo,\n            pageNum: 1,\n        };\n        fetchVideoData(params);\n    };\n\n    const onSearchVideo = () => {\n        setSearchParams({ ...searchParams, ...searchField.getValues() });\n    };\n\n    const onPageChange = (pageNum) => {\n        setPageInfo({ ...pageInfo, pageNum });\n        fetchVideoData({ ...searchParams, ...pageInfo, pageNum });\n    };\n\n    const onEditVideo = (record) => {\n        setDialogVisible(true);\n        const video = clonedeep(record);\n        eventProxy.trigger('editVideo', video);\n    };\n\n    const onDeleteVideo = (record) => {\n        const { intl: { formatMessage } } = props;\n        const messageValue = {\n            title: formatMessage({ id: 'media.video.delete.title' }),\n            content: formatMessage({ id: 'media.video.delete.content' }),\n            success: formatMessage({ id: 'media.base.delete.success' }),\n            failed: formatMessage({ id: 'media.base.delete.failed' }),\n        };\n        Dialog.confirm({\n            title: messageValue.title,\n            content: messageValue.content,\n            footerAlign: 'center',\n            onOk: () => {\n                return new Promise((resolve) => {\n                    deleteVideoInfoApi(record.videoId).then(() => {\n                        Message.success(messageValue.success);\n                        refreshData();\n                        resolve();\n                    }).catch((error) => {\n                        console.log('delete vidol error: ', error);\n                        Message.error(messageValue.failed);\n                        resolve();\n                    });\n                });\n            },\n        });\n    };\n\n    const onSaveVideo = (values, errors) => {\n        if (saveSubmitting) {\n            return;\n        }\n        if (errors) {\n            console.log('save errors:', errors);\n            return;\n        }\n        const { intl: { formatMessage } } = props;\n        const messageValue = {\n            success: formatMessage({ id: 'media.base.save.success' }),\n            failed: formatMessage({ id: 'media.base.save.failed' }),\n        };\n        setSaveSubmitting(true);\n        saveVideoInfoApi(values.videoId, values).then(() => {\n            Message.success(messageValue.success);\n            setDialogVisible(false);\n            refreshData();\n        }).catch((error) => {\n            Message.error(messageValue.failed);\n            console.log('save video error: ', error);\n        }).finally(() => {\n            setSaveSubmitting(false);\n        });\n    };\n\n    const onCloseDialog = () => {\n        setDialogVisible(false);\n    };\n\n    return (\n        <IceContainer>\n            <Loading\n                tip=\"loading...\"\n                visible={isLoading}\n                style={styles.loading}\n            >\n                <CustomToolBar\n                    config={toolBarConfigFun()}\n                    getInstance={(childCp) => {\n                        if (childCp) {\n                            searchField = childCp.getField();\n                        }\n                    }}\n                />\n                <CustomTable\n                    columns={columns}\n                    dataSource={videos}\n                    hasBorder={false}\n                    isZebra\n                />\n                <Pagination\n                    style={styles.pagination}\n                    type=\"simple\"\n                    current={pageInfo.pageNum}\n                    pageSize={pageInfo.pageSize}\n                    total={pageInfo.total}\n                    onChange={onPageChange}\n                />\n                <VideoEditDialog\n                    visible={dialogVisible}\n                    submitting={saveSubmitting}\n                    onClose={onCloseDialog}\n                    onSubmit={onSaveVideo}\n                />\n            </Loading>\n        </IceContainer>\n    );\n}\n\n\nconst styles = {\n    pagination: {\n        margin: '20px 0',\n        textAlign: 'center',\n    },\n    loading: {\n        width: '100%',\n    },\n    operationItem: {\n        marginRight: '10px',\n        textDecoration: 'none',\n        color: '#5485F7',\n        cursor: 'pointer',\n    },\n};\n\nexport default injectIntl(VideoManage);","d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\router.jsx",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\stores\\commonConfig.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\stores\\index.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\stores\\regionsConfig.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\utils\\AxiosUtil.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\utils\\DateUtil.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\utils\\eventProxy.js",[],"d:\\workspace\\IceProjects\\youtube-media-frontend\\src\\utils\\locale.js",[],{"ruleId":"549","severity":2,"message":"550","line":3,"column":8,"nodeType":"551","endLine":3,"endColumn":14},{"ruleId":"552","severity":2,"message":"553","line":18,"column":13,"nodeType":"554","messageId":"555","endLine":18,"endColumn":51,"fix":"556"},{"ruleId":"557","severity":1,"message":"558","line":18,"column":6,"nodeType":"559","endLine":18,"endColumn":8,"fix":"560"},{"ruleId":"561","severity":1,"message":"562","line":26,"column":9,"nodeType":"551","endLine":26,"endColumn":20},{"ruleId":"557","severity":1,"message":"563","line":27,"column":8,"nodeType":"559","endLine":27,"endColumn":10,"fix":"564"},{"ruleId":"561","severity":1,"message":"565","line":36,"column":13,"nodeType":"551","endLine":36,"endColumn":35},{"ruleId":"557","severity":1,"message":"566","line":38,"column":8,"nodeType":"559","endLine":38,"endColumn":22,"fix":"567"},{"ruleId":"561","severity":1,"message":"568","line":74,"column":36,"nodeType":"551","endLine":74,"endColumn":42},{"ruleId":"561","severity":1,"message":"569","line":75,"column":44,"nodeType":"551","endLine":75,"endColumn":57},{"ruleId":"561","severity":1,"message":"568","line":80,"column":36,"nodeType":"551","endLine":80,"endColumn":42},{"ruleId":"561","severity":1,"message":"570","line":81,"column":44,"nodeType":"551","endLine":81,"endColumn":59},{"ruleId":"561","severity":1,"message":"571","line":111,"column":36,"nodeType":"551","endLine":111,"endColumn":51},{"ruleId":"561","severity":1,"message":"572","line":120,"column":36,"nodeType":"551","endLine":120,"endColumn":45},{"ruleId":"561","severity":1,"message":"573","line":128,"column":36,"nodeType":"551","endLine":128,"endColumn":48},{"ruleId":"561","severity":1,"message":"574","line":244,"column":13,"nodeType":"551","endLine":244,"endColumn":26},{"ruleId":"561","severity":1,"message":"568","line":268,"column":24,"nodeType":"551","endLine":268,"endColumn":30},{"ruleId":"561","severity":1,"message":"568","line":287,"column":28,"nodeType":"551","endLine":287,"endColumn":34},{"ruleId":"557","severity":1,"message":"575","line":34,"column":8,"nodeType":"559","endLine":34,"endColumn":10,"fix":"576"},{"ruleId":"577","severity":1,"message":"578","line":87,"column":9,"nodeType":"551","endLine":87,"endColumn":14},{"ruleId":"561","severity":1,"message":"568","line":116,"column":20,"nodeType":"551","endLine":116,"endColumn":26},{"ruleId":"561","severity":1,"message":"568","line":159,"column":90,"nodeType":"551","endLine":159,"endColumn":96},{"ruleId":"561","severity":1,"message":"568","line":162,"column":75,"nodeType":"551","endLine":162,"endColumn":81},{"ruleId":"561","severity":1,"message":"579","line":34,"column":9,"nodeType":"551","endLine":34,"endColumn":28},{"ruleId":"557","severity":1,"message":"580","line":35,"column":8,"nodeType":"559","endLine":35,"endColumn":10,"fix":"581"},{"ruleId":"561","severity":1,"message":"579","line":38,"column":9,"nodeType":"551","endLine":38,"endColumn":28},{"ruleId":"557","severity":1,"message":"566","line":39,"column":8,"nodeType":"559","endLine":39,"endColumn":22,"fix":"582"},{"ruleId":"561","severity":1,"message":"583","line":128,"column":36,"nodeType":"551","endLine":128,"endColumn":47},{"ruleId":"561","severity":1,"message":"568","line":161,"column":24,"nodeType":"551","endLine":161,"endColumn":30},{"ruleId":"561","severity":1,"message":"568","line":178,"column":28,"nodeType":"551","endLine":178,"endColumn":34},{"ruleId":"584","severity":1,"message":"585","line":19,"column":43,"nodeType":"551","endLine":19,"endColumn":47},{"ruleId":"561","severity":1,"message":"586","line":21,"column":13,"nodeType":"551","endLine":21,"endColumn":39},{"ruleId":"557","severity":1,"message":"566","line":26,"column":8,"nodeType":"559","endLine":26,"endColumn":10,"fix":"587"},{"ruleId":"561","severity":1,"message":"568","line":48,"column":56,"nodeType":"551","endLine":48,"endColumn":62},{"ruleId":"584","severity":1,"message":"585","line":128,"column":41,"nodeType":"551","endLine":128,"endColumn":45},{"ruleId":"561","severity":1,"message":"568","line":151,"column":20,"nodeType":"551","endLine":151,"endColumn":26},{"ruleId":"561","severity":1,"message":"568","line":158,"column":24,"nodeType":"551","endLine":158,"endColumn":30},{"ruleId":"561","severity":1,"message":"568","line":170,"column":28,"nodeType":"551","endLine":170,"endColumn":34},{"ruleId":"561","severity":1,"message":"562","line":21,"column":9,"nodeType":"551","endLine":21,"endColumn":20},{"ruleId":"557","severity":1,"message":"563","line":22,"column":8,"nodeType":"559","endLine":22,"endColumn":10,"fix":"588"},{"ruleId":"561","severity":1,"message":"568","line":46,"column":36,"nodeType":"551","endLine":46,"endColumn":42},{"ruleId":"561","severity":1,"message":"589","line":47,"column":44,"nodeType":"551","endLine":47,"endColumn":61},{"ruleId":"561","severity":1,"message":"568","line":52,"column":36,"nodeType":"551","endLine":52,"endColumn":42},{"ruleId":"561","severity":1,"message":"590","line":75,"column":36,"nodeType":"551","endLine":75,"endColumn":54},{"ruleId":"561","severity":1,"message":"568","line":120,"column":24,"nodeType":"551","endLine":120,"endColumn":30},{"ruleId":"584","severity":1,"message":"585","line":20,"column":41,"nodeType":"551","endLine":20,"endColumn":45},{"ruleId":"561","severity":1,"message":"591","line":22,"column":13,"nodeType":"551","endLine":22,"endColumn":37},{"ruleId":"557","severity":1,"message":"566","line":27,"column":8,"nodeType":"559","endLine":27,"endColumn":10,"fix":"592"},{"ruleId":"561","severity":1,"message":"568","line":49,"column":56,"nodeType":"551","endLine":49,"endColumn":62},{"ruleId":"584","severity":1,"message":"585","line":141,"column":39,"nodeType":"551","endLine":141,"endColumn":43},{"ruleId":"561","severity":1,"message":"568","line":164,"column":20,"nodeType":"551","endLine":164,"endColumn":26},{"ruleId":"561","severity":1,"message":"568","line":171,"column":24,"nodeType":"551","endLine":171,"endColumn":30},{"ruleId":"561","severity":1,"message":"568","line":183,"column":28,"nodeType":"551","endLine":183,"endColumn":34},{"ruleId":"561","severity":1,"message":"562","line":21,"column":9,"nodeType":"551","endLine":21,"endColumn":20},{"ruleId":"557","severity":1,"message":"563","line":22,"column":8,"nodeType":"559","endLine":22,"endColumn":10,"fix":"593"},{"ruleId":"561","severity":1,"message":"568","line":46,"column":36,"nodeType":"551","endLine":46,"endColumn":42},{"ruleId":"561","severity":1,"message":"594","line":47,"column":40,"nodeType":"551","endLine":47,"endColumn":55},{"ruleId":"561","severity":1,"message":"568","line":52,"column":36,"nodeType":"551","endLine":52,"endColumn":42},{"ruleId":"561","severity":1,"message":"590","line":75,"column":36,"nodeType":"551","endLine":75,"endColumn":54},{"ruleId":"561","severity":1,"message":"568","line":120,"column":24,"nodeType":"551","endLine":120,"endColumn":30},{"ruleId":"584","severity":1,"message":"585","line":19,"column":42,"nodeType":"551","endLine":19,"endColumn":46},{"ruleId":"561","severity":1,"message":"595","line":21,"column":13,"nodeType":"551","endLine":21,"endColumn":38},{"ruleId":"557","severity":1,"message":"566","line":26,"column":8,"nodeType":"559","endLine":26,"endColumn":10,"fix":"596"},{"ruleId":"561","severity":1,"message":"568","line":48,"column":56,"nodeType":"551","endLine":48,"endColumn":62},{"ruleId":"584","severity":1,"message":"585","line":76,"column":40,"nodeType":"551","endLine":76,"endColumn":44},{"ruleId":"561","severity":1,"message":"568","line":99,"column":20,"nodeType":"551","endLine":99,"endColumn":26},{"ruleId":"561","severity":1,"message":"568","line":106,"column":24,"nodeType":"551","endLine":106,"endColumn":30},{"ruleId":"561","severity":1,"message":"568","line":118,"column":28,"nodeType":"551","endLine":118,"endColumn":34},{"ruleId":"561","severity":1,"message":"562","line":21,"column":9,"nodeType":"551","endLine":21,"endColumn":20},{"ruleId":"557","severity":1,"message":"563","line":22,"column":8,"nodeType":"559","endLine":22,"endColumn":10,"fix":"597"},{"ruleId":"561","severity":1,"message":"568","line":46,"column":36,"nodeType":"551","endLine":46,"endColumn":42},{"ruleId":"561","severity":1,"message":"598","line":47,"column":40,"nodeType":"551","endLine":47,"endColumn":56},{"ruleId":"561","severity":1,"message":"568","line":52,"column":36,"nodeType":"551","endLine":52,"endColumn":42},{"ruleId":"561","severity":1,"message":"590","line":75,"column":36,"nodeType":"551","endLine":75,"endColumn":54},{"ruleId":"561","severity":1,"message":"568","line":120,"column":24,"nodeType":"551","endLine":120,"endColumn":30},{"ruleId":"561","severity":1,"message":"568","line":54,"column":20,"nodeType":"551","endLine":54,"endColumn":26},{"ruleId":"561","severity":1,"message":"568","line":79,"column":90,"nodeType":"551","endLine":79,"endColumn":96},{"ruleId":"561","severity":1,"message":"568","line":82,"column":75,"nodeType":"551","endLine":82,"endColumn":81},{"ruleId":"584","severity":1,"message":"599","line":37,"column":21,"nodeType":"551","endLine":37,"endColumn":29},{"ruleId":"584","severity":1,"message":"600","line":39,"column":15,"nodeType":"551","endLine":39,"endColumn":22},{"ruleId":"561","severity":1,"message":"601","line":43,"column":23,"nodeType":"551","endLine":43,"endColumn":35},{"ruleId":"584","severity":1,"message":"602","line":49,"column":15,"nodeType":"551","endLine":49,"endColumn":25},{"ruleId":"561","severity":1,"message":"601","line":53,"column":23,"nodeType":"551","endLine":53,"endColumn":35},{"ruleId":"584","severity":1,"message":"603","line":139,"column":34,"nodeType":"551","endLine":139,"endColumn":47},{"ruleId":"584","severity":1,"message":"600","line":152,"column":27,"nodeType":"551","endLine":152,"endColumn":34},{"ruleId":"561","severity":1,"message":"604","line":162,"column":195,"nodeType":"551","endLine":162,"endColumn":213},{"ruleId":"561","severity":1,"message":"605","line":163,"column":87,"nodeType":"551","endLine":163,"endColumn":101},{"ruleId":"584","severity":1,"message":"606","line":185,"column":42,"nodeType":"551","endLine":185,"endColumn":48},{"ruleId":"584","severity":1,"message":"607","line":202,"column":21,"nodeType":"551","endLine":202,"endColumn":25},{"ruleId":"584","severity":1,"message":"603","line":213,"column":33,"nodeType":"551","endLine":213,"endColumn":46},{"ruleId":"561","severity":1,"message":"568","line":239,"column":21,"nodeType":"551","endLine":239,"endColumn":27},{"ruleId":"561","severity":1,"message":"568","line":241,"column":24,"nodeType":"551","endLine":241,"endColumn":30},{"ruleId":"561","severity":1,"message":"568","line":251,"column":24,"nodeType":"551","endLine":251,"endColumn":30},{"ruleId":"561","severity":1,"message":"568","line":255,"column":38,"nodeType":"551","endLine":255,"endColumn":44},{"ruleId":"561","severity":1,"message":"568","line":263,"column":38,"nodeType":"551","endLine":263,"endColumn":44},{"ruleId":"561","severity":1,"message":"568","line":288,"column":38,"nodeType":"551","endLine":288,"endColumn":44},{"ruleId":"561","severity":1,"message":"568","line":296,"column":38,"nodeType":"551","endLine":296,"endColumn":44},{"ruleId":"561","severity":1,"message":"608","line":29,"column":9,"nodeType":"551","endLine":29,"endColumn":25},{"ruleId":"557","severity":1,"message":"609","line":30,"column":8,"nodeType":"559","endLine":30,"endColumn":10,"fix":"610"},{"ruleId":"561","severity":1,"message":"611","line":39,"column":13,"nodeType":"551","endLine":39,"endColumn":30},{"ruleId":"557","severity":1,"message":"566","line":41,"column":8,"nodeType":"559","endLine":41,"endColumn":22,"fix":"612"},{"ruleId":"561","severity":1,"message":"568","line":91,"column":36,"nodeType":"551","endLine":91,"endColumn":42},{"ruleId":"561","severity":1,"message":"613","line":92,"column":44,"nodeType":"551","endLine":92,"endColumn":58},{"ruleId":"561","severity":1,"message":"568","line":100,"column":36,"nodeType":"551","endLine":100,"endColumn":42},{"ruleId":"561","severity":1,"message":"614","line":101,"column":44,"nodeType":"551","endLine":101,"endColumn":60},{"ruleId":"561","severity":1,"message":"615","line":145,"column":36,"nodeType":"551","endLine":145,"endColumn":52},{"ruleId":"561","severity":1,"message":"572","line":154,"column":36,"nodeType":"551","endLine":154,"endColumn":45},{"ruleId":"584","severity":1,"message":"616","line":174,"column":19,"nodeType":"551","endLine":174,"endColumn":27},{"ruleId":"561","severity":1,"message":"568","line":316,"column":24,"nodeType":"551","endLine":316,"endColumn":30},{"ruleId":"561","severity":1,"message":"568","line":335,"column":28,"nodeType":"551","endLine":335,"endColumn":34},{"ruleId":"584","severity":1,"message":"617","line":70,"column":15,"nodeType":"551","endLine":70,"endColumn":25},{"ruleId":"561","severity":1,"message":"618","line":75,"column":9,"nodeType":"551","endLine":75,"endColumn":27},{"ruleId":"557","severity":1,"message":"619","line":76,"column":8,"nodeType":"559","endLine":76,"endColumn":10,"fix":"620"},{"ruleId":"561","severity":1,"message":"568","line":127,"column":32,"nodeType":"551","endLine":127,"endColumn":38},{"ruleId":"561","severity":1,"message":"568","line":141,"column":44,"nodeType":"551","endLine":141,"endColumn":50},{"ruleId":"561","severity":1,"message":"568","line":150,"column":44,"nodeType":"551","endLine":150,"endColumn":50},{"ruleId":"561","severity":1,"message":"568","line":159,"column":44,"nodeType":"551","endLine":159,"endColumn":50},{"ruleId":"561","severity":1,"message":"568","line":168,"column":44,"nodeType":"551","endLine":168,"endColumn":50},{"ruleId":"561","severity":1,"message":"568","line":177,"column":95,"nodeType":"551","endLine":177,"endColumn":101},{"ruleId":"584","severity":1,"message":"585","line":19,"column":45,"nodeType":"551","endLine":19,"endColumn":49},{"ruleId":"561","severity":1,"message":"621","line":21,"column":13,"nodeType":"551","endLine":21,"endColumn":41},{"ruleId":"557","severity":1,"message":"566","line":26,"column":8,"nodeType":"559","endLine":26,"endColumn":10,"fix":"622"},{"ruleId":"561","severity":1,"message":"568","line":48,"column":56,"nodeType":"551","endLine":48,"endColumn":62},{"ruleId":"584","severity":1,"message":"585","line":129,"column":43,"nodeType":"551","endLine":129,"endColumn":47},{"ruleId":"561","severity":1,"message":"568","line":152,"column":20,"nodeType":"551","endLine":152,"endColumn":26},{"ruleId":"561","severity":1,"message":"568","line":159,"column":24,"nodeType":"551","endLine":159,"endColumn":30},{"ruleId":"561","severity":1,"message":"568","line":171,"column":28,"nodeType":"551","endLine":171,"endColumn":34},{"ruleId":"561","severity":1,"message":"562","line":21,"column":9,"nodeType":"551","endLine":21,"endColumn":20},{"ruleId":"557","severity":1,"message":"563","line":22,"column":8,"nodeType":"559","endLine":22,"endColumn":10,"fix":"623"},{"ruleId":"561","severity":1,"message":"568","line":46,"column":36,"nodeType":"551","endLine":46,"endColumn":42},{"ruleId":"561","severity":1,"message":"624","line":47,"column":40,"nodeType":"551","endLine":47,"endColumn":59},{"ruleId":"561","severity":1,"message":"568","line":52,"column":36,"nodeType":"551","endLine":52,"endColumn":42},{"ruleId":"561","severity":1,"message":"590","line":75,"column":36,"nodeType":"551","endLine":75,"endColumn":54},{"ruleId":"561","severity":1,"message":"568","line":120,"column":24,"nodeType":"551","endLine":120,"endColumn":30},{"ruleId":"584","severity":1,"message":"625","line":37,"column":21,"nodeType":"551","endLine":37,"endColumn":26},{"ruleId":"584","severity":1,"message":"600","line":39,"column":15,"nodeType":"551","endLine":39,"endColumn":22},{"ruleId":"561","severity":1,"message":"601","line":43,"column":23,"nodeType":"551","endLine":43,"endColumn":35},{"ruleId":"584","severity":1,"message":"602","line":49,"column":15,"nodeType":"551","endLine":49,"endColumn":25},{"ruleId":"561","severity":1,"message":"601","line":53,"column":23,"nodeType":"551","endLine":53,"endColumn":35},{"ruleId":"584","severity":1,"message":"603","line":139,"column":34,"nodeType":"551","endLine":139,"endColumn":47},{"ruleId":"584","severity":1,"message":"600","line":152,"column":27,"nodeType":"551","endLine":152,"endColumn":34},{"ruleId":"561","severity":1,"message":"604","line":162,"column":195,"nodeType":"551","endLine":162,"endColumn":213},{"ruleId":"561","severity":1,"message":"605","line":163,"column":87,"nodeType":"551","endLine":163,"endColumn":101},{"ruleId":"584","severity":1,"message":"606","line":185,"column":42,"nodeType":"551","endLine":185,"endColumn":48},{"ruleId":"584","severity":1,"message":"607","line":202,"column":21,"nodeType":"551","endLine":202,"endColumn":25},{"ruleId":"584","severity":1,"message":"603","line":213,"column":33,"nodeType":"551","endLine":213,"endColumn":46},{"ruleId":"561","severity":1,"message":"568","line":240,"column":21,"nodeType":"551","endLine":240,"endColumn":27},{"ruleId":"561","severity":1,"message":"568","line":242,"column":24,"nodeType":"551","endLine":242,"endColumn":30},{"ruleId":"561","severity":1,"message":"568","line":252,"column":24,"nodeType":"551","endLine":252,"endColumn":30},{"ruleId":"561","severity":1,"message":"568","line":256,"column":38,"nodeType":"551","endLine":256,"endColumn":44},{"ruleId":"561","severity":1,"message":"568","line":264,"column":38,"nodeType":"551","endLine":264,"endColumn":44},{"ruleId":"561","severity":1,"message":"568","line":289,"column":38,"nodeType":"551","endLine":289,"endColumn":44},{"ruleId":"561","severity":1,"message":"568","line":297,"column":38,"nodeType":"551","endLine":297,"endColumn":44},{"ruleId":"561","severity":1,"message":"626","line":58,"column":65,"nodeType":"551","endLine":58,"endColumn":74},{"ruleId":"561","severity":1,"message":"627","line":66,"column":66,"nodeType":"551","endLine":66,"endColumn":72},{"ruleId":"561","severity":1,"message":"568","line":102,"column":20,"nodeType":"551","endLine":102,"endColumn":26},{"ruleId":"561","severity":1,"message":"568","line":133,"column":90,"nodeType":"551","endLine":133,"endColumn":96},{"ruleId":"561","severity":1,"message":"568","line":136,"column":75,"nodeType":"551","endLine":136,"endColumn":81},{"ruleId":"561","severity":1,"message":"608","line":34,"column":9,"nodeType":"551","endLine":34,"endColumn":25},{"ruleId":"557","severity":1,"message":"609","line":35,"column":8,"nodeType":"559","endLine":35,"endColumn":10,"fix":"628"},{"ruleId":"561","severity":1,"message":"611","line":39,"column":13,"nodeType":"551","endLine":39,"endColumn":30},{"ruleId":"557","severity":1,"message":"629","line":41,"column":8,"nodeType":"559","endLine":41,"endColumn":23,"fix":"630"},{"ruleId":"561","severity":1,"message":"631","line":50,"column":13,"nodeType":"551","endLine":50,"endColumn":27},{"ruleId":"557","severity":1,"message":"566","line":52,"column":8,"nodeType":"559","endLine":52,"endColumn":22,"fix":"632"},{"ruleId":"561","severity":1,"message":"568","line":168,"column":36,"nodeType":"551","endLine":168,"endColumn":42},{"ruleId":"561","severity":1,"message":"633","line":169,"column":44,"nodeType":"551","endLine":169,"endColumn":55},{"ruleId":"561","severity":1,"message":"568","line":177,"column":36,"nodeType":"551","endLine":177,"endColumn":42},{"ruleId":"561","severity":1,"message":"634","line":178,"column":44,"nodeType":"551","endLine":178,"endColumn":57},{"ruleId":"561","severity":1,"message":"635","line":248,"column":36,"nodeType":"551","endLine":248,"endColumn":49},{"ruleId":"584","severity":1,"message":"616","line":261,"column":19,"nodeType":"551","endLine":261,"endColumn":27},{"ruleId":"561","severity":1,"message":"568","line":408,"column":24,"nodeType":"551","endLine":408,"endColumn":30},{"ruleId":"561","severity":1,"message":"568","line":425,"column":28,"nodeType":"551","endLine":425,"endColumn":34},"no-unused-vars","'Header' is defined but never used.","Identifier","yoda","Expected literal to be on the right side of ===.","BinaryExpression","expected",{"range":"636","text":"637"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchOperatorId', 'fetchRegionData', and 'fetchServerUri'. Either include them or remove the dependency array.","ArrayExpression",{"range":"638","text":"639"},"no-use-before-define","'refreshData' was used before it was defined.","React Hook useEffect has a missing dependency: 'refreshData'. Either include it or remove the dependency array.",{"range":"640","text":"641"},"'fetchChannelDataSource' was used before it was defined.","React Hook useEffect has a missing dependency: 'pageInfo'. Either include it or remove the dependency array.",{"range":"642","text":"643"},"'styles' was used before it was defined.","'onEditChannel' was used before it was defined.","'onDeleteChannel' was used before it was defined.","'onSearchChannel' was used before it was defined.","'onCollect' was used before it was defined.","'onAddChannel' was used before it was defined.","'onCloseDialog' was used before it was defined.","React Hook useEffect has a missing dependency: 'field'. Either include it or remove the dependency array.",{"range":"644","text":"645"},"no-param-reassign","Assignment to function parameter 'value'.","'fetchCollectLogData' was used before it was defined.","React Hook useEffect has missing dependencies: 'pageInfo' and 'searchParams'. Either include them or remove the dependency array.",{"range":"646","text":"643"},{"range":"647","text":"643"},"'onSearchLog' was used before it was defined.","no-shadow","'type' is already declared in the upper scope.","'fetchGamingVideoDataSource' was used before it was defined.",{"range":"648","text":"649"},{"range":"650","text":"641"},"'onViewGamingVideo' was used before it was defined.","'onRefreshPageVideo' was used before it was defined.","'fetchLiveVideoDataSource' was used before it was defined.",{"range":"651","text":"649"},{"range":"652","text":"641"},"'onViewLiveVideo' was used before it was defined.","'fetchMovieVideoDataSource' was used before it was defined.",{"range":"653","text":"649"},{"range":"654","text":"641"},"'onViewMovieVideo' was used before it was defined.","'playList' is already declared in the upper scope.","'posters' is already declared in the upper scope.","'buildImgName' was used before it was defined.","'bigPosters' is already declared in the upper scope.","'defaultPoster' is already declared in the upper scope.","'onSetDefaultPoster' was used before it was defined.","'onRemovePoster' was used before it was defined.","'poster' is already declared in the upper scope.","'data' is already declared in the upper scope.","'fetchChannelData' was used before it was defined.","React Hook useEffect has a missing dependency: 'fetchChannelData'. Either include it or remove the dependency array.",{"range":"655","text":"656"},"'fetchPlayListData' was used before it was defined.",{"range":"657","text":"643"},"'onEditPlayList' was used before it was defined.","'onDeletePlayList' was used before it was defined.","'onSearchPlayList' was used before it was defined.","'channels' is already declared in the upper scope.","'regionData' is already declared in the upper scope.","'fetchSystemProfile' was used before it was defined.","React Hook useEffect has a missing dependency: 'fetchSystemProfile'. Either include it or remove the dependency array.",{"range":"658","text":"659"},"'fetchTrendingVideoDataSource' was used before it was defined.",{"range":"660","text":"649"},{"range":"661","text":"641"},"'onViewTrendingVideo' was used before it was defined.","'video' is already declared in the upper scope.","'removeTag' was used before it was defined.","'addTag' was used before it was defined.",{"range":"662","text":"656"},"React Hook useEffect has a missing dependency: 'fetchPlayListData'. Either include it or remove the dependency array.",{"range":"663","text":"664"},"'fetchVideoData' was used before it was defined.",{"range":"665","text":"643"},"'onEditVideo' was used before it was defined.","'onDeleteVideo' was used before it was defined.","'onSearchVideo' was used before it was defined.",[509,547],"process.env.NODE_ENV === \"development\"",[568,570],"[fetchOperatorId, fetchRegionData, fetchServerUri]",[1201,1203],"[refreshData]",[1483,1497],"[pageInfo, searchParams]",[831,833],"[field]",[1162,1164],[1274,1288],[1011,1013],"[pageInfo]",[960,962],[1037,1039],[946,948],[1003,1005],[953,955],[1371,1373],"[fetchChannelData]",[1627,1641],[2805,2807],"[fetchSystemProfile]",[1027,1029],[974,976],[1571,1573],[1678,1693],"[fetchPlayListData, selectChannel]",[1944,1958]]